# SPDX-License-Identifier: Apache-2.0
# Copyright 2024 Intel Corporation
name: GitHub release and Docker images

on:
  push:
    branches:
      - master
    tags:
      - v*

jobs:
  push-images:
    runs-on: ubuntu-latest
    env:
      REGISTRY: registry.aetherproject.org
      DOCKER_REGISTRY: registry.aetherproject.org/
      DOCKER_REPOSITORY: sdcore/
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - run: echo GIT_SHA_SHORT=$(git rev-parse --short HEAD) >> $GITHUB_ENV

      - uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AETHER_REGISTRY_USERNAME }}
          password: ${{ secrets.AETHER_REGISTRY_PASSWORD }}

      - name: Build and push "master-latest" Docker image
        env:
          DOCKER_TAG: master-latest
          CPU: haswell
        run: |
          docker pull ${DOCKER_REPOSITORY}upf-epc-bess:$DOCKER_TAG
          docker pull ${DOCKER_REPOSITORY}upf-epc-pfcpiface:$DOCKER_TAG
          CPU=$CPU make docker-build
          make docker-push

      - name: Build and push "master-GIT_SHA" Docker image
        env:
          DOCKER_TAG: master-${{ env.GIT_SHA_SHORT }}
        run: |
          make docker-build
          make docker-push

  # CAUTION: Other actions depend on this name "tag-github"
  tag-github:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.version-change.outputs.changed }}
      version: ${{ steps.version-change.outputs.version }}
      release_branch: ${{ steps.version-change.outputs.release_branch }}
      version_branch: ${{ steps.version-change.outputs.version_branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changes
        id: version-file
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep VERSION; then
            echo "changed=true" >> $GITHUB_OUTPUT
            version_before=$(git show ${{ github.event.before }}:VERSION)
            echo "version_before=$version_before" >> $GITHUB_OUTPUT
          else
            echo "VERSION file was not changed"
          fi

      - name: Validate change in version file
        id: version-change
        if: steps.version-file.outputs.changed == 'true'
        run: |
          version=$(cat VERSION)
          version_before_full=${{ steps.version-file.outputs.version_before }}
          version_before=${version_before_full::-4}
          echo "version=$version"
          echo "version_before=$version_before"
          validate="^[0-9]+\.[0-9]+\.[0-9]+$"
          if [[ $version =~ $validate ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$version" >> $GITHUB_OUTPUT
          else
            echo "Version change not for release"
          fi
          if [[ $version_before =~ $validate ]]; then
            IFS='.' read -r major minor patch <<< "$version"
            IFS='.' read -r major_b minor_b patch_b <<< "$version_before"
            if [[ "$major" -ne "$major_b" ]] || [[ "$minor" -ne "$minor_b" ]]; then
              version_branch="$major_b.$minor_b"
              echo "release_branch=true" >> $GITHUB_OUTPUT
              echo "version_branch=$version_branch" >> $GITHUB_OUTPUT
            fi
          else
            echo "Version change not for branch release"
          fi

      - name: Create release using REST API
        if: steps.version-change.outputs.changed == 'true'
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GH_OMEC_PAT }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d '{
              "tag_name": "v${{ steps.version-change.outputs.version }}",
              "target_commitish": "master",
              "name": "v${{ steps.version-change.outputs.version }}",
              "draft": false,
              "prerelease": false,
              "generate_release_notes": true
              }'

  release-image:
    runs-on: ubuntu-latest
    needs: tag-github
    if: needs.tag-github.outputs.changed == 'true'
    env:
      REGISTRY: docker.io
      DOCKER_REGISTRY: docker.io/
      DOCKER_REPOSITORY: omecproject/
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push release Docker image
        env:
          DOCKER_TAG: rel-${{ needs.tag-github.outputs.version }}
          CPU: haswell
        run: |
          CPU=$CPU make docker-build
          make docker-push

      - name: Build and push release Docker image for Ivybridge CPU
        env:
          DOCKER_TAG: rel-${{ needs.tag-github.outputs.version }}-ivybridge
          CPU: ivybridge
        run: |
          CPU=$CPU make docker-build
          make docker-push

  update-version:
    runs-on: ubuntu-latest
    needs: tag-github
    if: needs.tag-github.outputs.changed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Increment version
        run: |
          version=${{ needs.tag-github.outputs.version }}
          IFS='.' read -r major minor patch <<< "$version"
          patch_update=$((patch+1))
          NEW_VERSION="$major.$minor.$patch_update-dev"
          echo $NEW_VERSION > VERSION
          echo "Updated version: $NEW_VERSION"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GH_OMEC_PAT }}
          commit-message: Update version
          committer: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
          signoff: false
          branch: version-update
          delete-branch: true
          title: Update version
          body: |
            Update VERSION file
          add-paths: |
            VERSION

  branch-release:
    runs-on: ubuntu-latest
    needs: tag-github
    if: (needs.tag-github.outputs.changed == 'true') && (needs.tag-github.outputs.release_branch == 'true')
    env:
      GITHUB_TOKEN: ${{ secrets.GH_OMEC_PAT }}
    steps:
      - uses: actions/checkout@v4

      - uses: peterjgrainger/action-create-branch@v3.0.0
        with:
          branch: "rel-${{ needs.tag-github.outputs.version_branch }}"
          sha: '${{ github.event.pull_request.head.sha }}'
