// Copyright (c) 2017, The Regents of the University of California.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
//
// * Neither the names of the copyright holders nor the names of their
// contributors may be used to endorse or promote products derived from this
// software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package sample.supdate.pb;

/**
 * The function `clear()` for SequentialUpdate takes no parameters and clears all
 * state in the module.
 */
message SequentialUpdateCommandClearArg {
}

/**
 * The SequentialUpdate module rewrites a specified field (`offset` and `size`) in a packet
 * with a sequentially increased value from a specified min to max values.
 *
 * __Input Gates__: 1
 * __Output Gates__: 1
 */
message SequentialUpdateArg {
  /**
   * SequentialUpdate's Field specifies where to rewrite, and what values to rewrite
   * in each packet processed.
   */
  message Field {
    int64 offset = 1; /// Offset in bytes for where to rewrite.
    uint64 size = 2; /// The number of bytes to write.
    uint64 min = 3; /// The minimum value to insert into the packet.
    uint64 max = 4; /// The maximum value to insert into the packet.
  }
  repeated Field fields = 1; /// A list of SequentialUpdate Fields.
}
