# Copyright (c) 2014-2016, The Regents of the University of California.
# Copyright (c) 2016-2017, Nefeli Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# * Neither the names of the copyright holders nor the names of their
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import time
import socket
import scapy.all as scapy

ITERATION = 10
PORT_NAME = 'p'

# NOTE: You can disable this option to use a conventional socket path based on
# the filesystem. In that case, you must have (root) access to the socket path.
ABSTRACT_SOCKET_ADDRESS = True

SOCKET_PATH = '/tmp/bess_unix_%s' % PORT_NAME

def gen_packet(src_ip, dst_ip):
    eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='06:16:3e:1b:72:32')
    ip = scapy.IP(src=src_ip, dst=dst_ip)
    udp = scapy.UDP(sport=10001, dport=10002)
    payload = 'helloworld'
    return eth/ip/udp/payload

if ABSTRACT_SOCKET_ADDRESS:
    # '@' is replaced with '\0' by BESS daemon
    p = UnixSocketPort(name='p', path='@' + SOCKET_PATH)
else:
    p = UnixSocketPort(name='p', path=SOCKET_PATH)

# Randomize source IP addresses
PortInc(port='p') -> \
        RandomUpdate(fields=[{'offset': 26, 'size': 4, 'min': 0, 'max': 0xffffffff}]) -> \
        PortOut(port='p')

bess.resume_all()

s = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
if ABSTRACT_SOCKET_ADDRESS:
    s.connect('\0' + SOCKET_PATH)
else:
    s.connect(SOCKET_PATH)

for i in range(ITERATION):
    original = gen_packet('10.0.0.1', '192.168.1.10' + bytes(i))
    s.send(bytes(original))

    modified = s.recv(2048)
    pkt = scapy.Ether(modified)
    assert len(original) == len(modified)

    print('%2d/%2d\tOriginal: %s' % (i + 1, ITERATION, original.summary()))
    print('\tModified: %s' % pkt.summary())

    time.sleep(1)

bess.pause_all()
