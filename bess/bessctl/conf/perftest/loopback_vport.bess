# Copyright (c) 2014-2016, The Regents of the University of California.
# Copyright (c) 2016-2017, Nefeli Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# * Neither the names of the copyright holders nor the names of their
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import time
import multiprocessing

num_cpus = multiprocessing.cpu_count()

CORE_START = int($BESS_CORE_START!'1')
CORE_END = int($BESS_CORE_END!num_cpus)   # not inclusive
CORE_STEP = int($BESS_CORE_STEP!'1')      # for SMT servers
INTERVAL = int($BESS_INTERVAL!'2')

cpu_set = []
ports = []

def measure():
    assert len(cpu_set) == len(ports)

    old_stats = []
    new_stats = []

    for port in ports:
        old_stats.append(bess.get_port_stats(port.name))

    time.sleep(INTERVAL)

    for port in ports:
        new_stats.append(bess.get_port_stats(port.name))

    out_mpps = []
    inc_mpps = []

    for i in range(len(ports)):
        time_diff = new_stats[i].timestamp - old_stats[i].timestamp

        pkts_diff = new_stats[i].out.packets - \
                    old_stats[i].out.packets
        out_mpps.append(pkts_diff / time_diff / 1000000.0)

        pkts_diff = new_stats[i].inc.packets - \
                    old_stats[i].inc.packets
        inc_mpps.append(pkts_diff / time_diff / 1000000.0)

    print('%-15s' % 'CPU', end=' ')
    print('%7s' % '', end=' ')
    for i in range(len(ports)):
        print('%7d' % cpu_set[i], end=' ')
    print

    print('%-15s' % 'Ports', end=' ')
    print('%7s' % '(total)', end=' ')
    for i in range(len(ports)):
        print('%7s' % ports[i].name, end=' ')
    print()

    print('-' * (8 * (len(ports) + 3)))

    print('%-15s' % 'Outgoing (Mpps)', end=' ')
    print('%7.3f' % sum(out_mpps), end=' ')
    for i in range(len(ports)):
        print('%7.3f' % out_mpps[i], end=' ')
    print()

    print('%-15s' % 'Incoming (Mpps)', end=' ')
    print('%7.3f' % sum(inc_mpps), end=' ')
    for i in range(len(ports)):
        print('%7.3f' % inc_mpps[i], end=' ')
    print()
    print()

for cpu in range(CORE_START, CORE_END, CORE_STEP):
    v = VPort(loopback=1, rxq_cpus=[cpu])

    cpu_set.append(cpu)
    ports.append(v)

    Source() -> PortOut(port=v)
    PortInc(port=v) -> Sink()

    bess.resume_all()
    measure()
    bess.pause_all()
