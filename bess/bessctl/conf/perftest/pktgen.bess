# Copyright (c) 2014-2016, The Regents of the University of California.
# Copyright (c) 2016-2017, Nefeli Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# * Neither the names of the copyright holders nor the names of their
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import scapy.all as scapy

pkt_size = int($BESS_PKT_SIZE!'60')
num_ports = int($BESS_PORTS!'1')
num_cores = int($BESS_CORES!'1')
mbps = float($BESS_RATELIMIT_MBPS!'0') # default no limit
imix = int($BESS_IMIX!'0')

assert(60 <= pkt_size <= 1522)
assert(1 <= num_ports <= 16)
assert(1 <= num_cores <= 4)

# generate flows by varying dst IP addr
num_flows = int($BESS_FLOWS!'1')
assert(1 <= num_flows <= 256 ** 3)

def build_pkt(size):
    eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='06:16:3e:1b:72:32')
    ip = scapy.IP(src='192.168.0.1', dst='10.0.0.1')
    udp = scapy.UDP(sport=10001, dport=10002)
    payload = ('hello' + '0123456789' * 200)[:size-len(eth/ip/udp)]
    pkt = eth/ip/udp/payload
    pkt.show()
    return bytes(pkt)

if imix:
    # https://en.wikipedia.org/wiki/Internet_Mix
    pkt_templates = [
            build_pkt(60),
            build_pkt(60),
            build_pkt(60),
            build_pkt(60),
            build_pkt(60),
            build_pkt(60),
            build_pkt(60),
            build_pkt(590),
            build_pkt(590),
            build_pkt(590),
            build_pkt(1514)
            ]
else:
    pkt_templates = [build_pkt(pkt_size)]

ports = [PMDPort(port_id=i, num_inc_q=num_cores, num_out_q=num_cores) \
         for i in range(num_ports)]

for i in range(num_cores):
    print("starting up worker: " + bytes(i))
    bess.add_worker(wid=i, core=i)

    src = Source()
    rr = RoundRobin(gates=range(num_ports))
    src \
    -> Rewrite(templates=pkt_templates) \
    -> RandomUpdate(fields=[{'offset': 30, 'size': 4, 'min': 0x0a000001, 'max': 0x0a000001 + num_flows - 1}]) \
    -> IPChecksum() \
    -> rr

    if mbps != 0:
        tc_name = 'bit_limit%d' % i
        bess.add_tc(tc_name, policy='rate_limit', resource='bit', limit={'bit': int(mbps / num_cores * 1e6)})
        src.attach_task(parent=tc_name)
    else:
        src.attach_task(wid=i)

    for j in range(num_ports):
        rr:j -> Update(fields=[{'offset': 29, 'size': 1, 'value': j+1}]) -> QueueOut(port=ports[j].name, qid=i)
        qinc = QueueInc(port=ports[j].name, qid=i)
        qinc -> Sink()
        qinc.attach_task(wid=i)
