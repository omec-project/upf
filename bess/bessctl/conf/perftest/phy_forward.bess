# Copyright (c) 2014-2016, The Regents of the University of California.
# Copyright (c) 2016-2017, Nefeli Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# * Neither the names of the copyright holders nor the names of their
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

num_ports = int($BESS_PORTS!'1')
num_cores = int($BESS_CORES!'1')
mq_mode = int($BESS_MQ!'0')
fwd_mode = $BESS_FWD!'pair'
start_core = int($BESS_START_CORE!'0')
q_size = int($BESS_QSIZE!'0')

# parameter sanity check
assert(num_cores in [1, 2, 4])
assert(fwd_mode in ['pair', 'next', 'echo'])
assert(1 <= num_ports <= 8)

if mq_mode:
    num_q = num_cores
else:
    num_q = 1

kwargs = {'num_inc_q': num_q,
          'num_out_q': num_q}

if q_size:
    kwargs['size_inc_q'] = q_size
    kwargs['size_out_q'] = q_size

for i in range(num_cores):
    bess.add_worker(i, start_core + i)

ports = [PMDPort(port_id=i, **kwargs) for i in range(num_ports)]

next_wid = 0

for i in range(num_ports):
    inc_port_id = i

    if fwd_mode == 'pair':
        out_port_id = i - 1 if i % 2 else i + 1
        # we cannot pair the last one if there are an odd number of ports
        if out_port_id == num_ports:
            out_port_id = i
    elif fwd_mode == 'next':
        out_port_id = (i + 1) % num_ports
    else:
        out_port_id = i

    for j in range(num_q):
        # more meaningful name for easy debugging
        qinc_name = 'qinc_p%d_q%d' % (inc_port_id, j)
        qout_name = 'qout_p%d_q%d' % (out_port_id, j)

        QueueInc(name=qinc_name, port=ports[inc_port_id], qid=j) \
        -> QueueOut(name=qout_name, port=ports[out_port_id], qid=j)

        bess.attach_task(module_name=qinc_name, wid=next_wid)
        next_wid = (next_wid + 1) % num_cores
