# Copyright (c) 2014-2016, The Regents of the University of California.
# Copyright (c) 2016-2017, Nefeli Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# * Neither the names of the copyright holders nor the names of their
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Check out "show tc" and "monitor tc" commands

# for every second, src0 is scheduled 100000 times
src0::Source() -> Sink()
bess.add_tc('schedule_limit',
            policy='rate_limit',
            resource='count',
            limit={'count': 100000})
src0.attach_task(parent='schedule_limit')

# up to 100Mhz
src1::Source() -> Sink()
bess.add_tc('cycle_limit',
            policy='rate_limit',
            resource='cycle',
            limit={'cycle': 100000000})
src1.attach_task(parent='cycle_limit')

# 10M packets / sec
src2::Source() -> Sink()
bess.add_tc('packet_limit',
            policy='rate_limit',
            resource='packet',
            limit={'packet': 10000000})
src2.attach_task(parent='packet_limit')

# Gigabits per second
src3::Source() -> Sink()
bess.add_tc('bit_limit',
            policy='rate_limit',
            resource='bit',
            limit={'bit': 1000000000})
src3.attach_task(parent='bit_limit')

src4::Source() -> Sink()
