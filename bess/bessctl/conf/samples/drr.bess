# Copyright (c) 2017, Joshua Stone.
# Copyright (c) 2016-2017, Nefeli Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# * Neither the names of the copyright holders nor the names of their
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import scapy.all as scapy

eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='06:16:3e:1b:72:32')
ip1 = scapy.IP(src='192.168.1.1', dst='10.0.0.1')
ip2 = scapy.IP(src='192.168.2.2', dst= '10.0.0.2')
udp = scapy.UDP(sport=10001, dport=10002)
payload = 'helloworld'
pkt_bytes1 = bytes(eth/ip1/udp/payload)
pkt_bytes2 = bytes(eth/ip2/udp/payload)

# Create the pipeline from two sources rewriting each to have their own
# source port and destination port respectively, the pushing them into
# the DRR such that they are two disinct flows. (flows are identified based
# on the five tuple)
src1::Source() -> Rewrite(templates=[pkt_bytes1]) \
  -> q::DRR(num_flows=4, quantum=1000) -> Sink()
src2::Source() ->Rewrite(templates=[pkt_bytes2]) \
  -> q

# drr and source uses tasks to forward packets. to throttle the forwarding rate,
# once can put a rate a limiter on the tasks associated with these modules.
# as a result of the throttle on drr, drr will fairly distribute the throughput across
# all of the flows. (In order to maximize fairness, the quantum should be tweaked)
bess.add_tc('fast', policy='rate_limit', resource='packet', limit={'packet': 90000})
src1.attach_task(parent='fast')

bess.add_tc('slow', policy='rate_limit', resource='packet', limit={'packet': 40000})
src2.attach_task(parent='slow')

bess.add_tc('medium', policy='rate_limit', resource='packet', limit={'packet': 50000})
q.attach_task(parent='medium')
