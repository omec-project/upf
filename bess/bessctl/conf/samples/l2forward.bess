# Copyright (c) 2014-2016, The Regents of the University of California.
# Copyright (c) 2016-2017, Nefeli Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# * Neither the names of the copyright holders nor the names of their
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import scapy.all as scapy
import struct

num_entries = int($BESS_ENTRIES!'1000')
use_exactmatch = bool(int(($BESS_EXACTMATCH!'0')))

assert num_entries >= 1


def i2mac(x):
    return ':'.join(['%02x' % ((x >> (5 - i) * 8) & 0xff) for i in range(6)])


if use_exactmatch:
    fib = ExactMatch(fields=[{'offset': 0, 'size': 6}])
    for i in range(num_entries):
        fib.add(fields=[struct.pack('!xxL', i + 1)], gate=i + 1)
else:
    fib = L2Forward()
    fib.add(entries=[{'addr': i2mac(i + 1), 'gate': i + 1}
                     for i in range(num_entries)])

pkt = scapy.Ether(src='02:00:00:00:00:01', dst='00:00:00:00:00:01')
pkt_bytes = bytes(pkt)

Source() -> \
        Rewrite(templates=[pkt_bytes]) -> \
        RandomUpdate(fields=[{'offset': 2, 'size': 4, 'min': 1, 'max': num_entries}]) -> \
        fib:1 -> \
        Sink()
