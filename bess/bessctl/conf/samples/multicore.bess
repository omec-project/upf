# Copyright (c) 2014-2016, The Regents of the University of California.
# Copyright (c) 2016-2017, Nefeli Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# * Neither the names of the copyright holders nor the names of their
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# TODO:
# 1. multi-queue port support
# 2. syntactic sugars
# 3. "daemon reset" should remove workers as well

# Syntax: bind worker:<worker ID> => core:<core ID>
# Bind a worker thread to the specified CPU core.
# It creates a new worker thread if not already exists.
#bind worker:0 => core:0
#bind worker:1 => core:1

bess.add_worker(0, 0)
bess.add_worker(1, 1)

sink::Sink()
src0::Source() -> sink
src1::Source() -> sink

# Syntax: attach <task name> => worker:<worker ID>
# Create a dummy traffic class for the specified task,
# and attach it to the worker.
#
# <task name> could be formatted as either
#       1. module
#       2. module:*
#	3. module:<task ID>

#attach src0:0 => worker:0
#attach src1:0 => worker:1

src0.attach_task(wid=0)
src1.attach_task(wid=1)

# Future work
#
# 1. creating a traffic class
#    Syntax: tc <TC name> [parent <TC name>] ...
#
# 2. attaching task to a traffic class
#    Syntax: attach <task name> => tc:<traffic class ID>
