# Copyright (c) 2014-2016, The Regents of the University of California.
# Copyright (c) 2016-2017, Nefeli Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# * Neither the names of the copyright holders nor the names of their
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Simple IPv4 LPM example. Try tcpdump on each output gate of 'ipfwd'.

import scapy.all as scapy

pkt_size = int($BESS_PKT_SIZE!'60')

assert(60 <= pkt_size <= 1522)

# Craft a packet with the specified destination IP address
def gen_packet(dst_ip):
    eth = scapy.Ether(src='02:1e:67:9f:4d:ae', dst='06:16:3e:1b:72:32')
    ip = scapy.IP(src='1.2.3.4', dst=dst_ip)
    udp = scapy.UDP(sport=10001, dport=10002)
    payload = ('hello' + '0123456789' * 200)[:pkt_size-len(eth/ip/udp)]
    pkt = eth/ip/udp/payload
    return bytes(pkt)

packets = [gen_packet('172.16.100.1'),
           gen_packet('172.12.55.99'),
           gen_packet('192.168.1.123'),
          ]

Source() -> Rewrite(templates=packets) -> ipfwd::IPLookup()

ipfwd:0 -> Sink()   # there should be no packets
ipfwd:1 -> Sink()
ipfwd:2 -> Sink()
ipfwd:5 -> Sink()   # used as default gate

ipfwd.add(prefix='172.16.0.0', prefix_len=16, gate=1)
ipfwd.add(prefix='192.168.1.0', prefix_len=24, gate=2)
ipfwd.add(prefix='0.0.0.0', prefix_len=0, gate=5)
