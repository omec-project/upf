import scapy.all as s
from scapy.contrib.gtp import *

import iptools
def ip2long(ip):
    return iptools.ipv4.ip2long(ip)

def gen_inet_packet(size, src_mac, dst_mac, src_ip, dst_ip):
    eth = s.Ether(src=src_mac, dst=dst_mac)
    ip = s.IP(src=src_ip, dst=dst_ip)
    udp = s.UDP(sport=10001, dport=10002)
    payload = ('hello' + '0123456789' * 200)[:size-len(eth/ip/udp)]
    pkt = eth/ip/udp/payload
    return bytes(pkt)

def gen_gtpu_packet(size, src_mac, dst_mac, src_ip, dst_ip, inner_src_ip, inner_dst_ip, teid):
    eth = s.Ether(src=src_mac, dst=dst_mac)
    ip = s.IP(src=src_ip, dst=dst_ip)
    udp = s.UDP(sport=2152, dport=2152)
    inet_p = s.IP(src=inner_src_ip, dst=inner_dst_ip) / \
        s.UDP(sport=10001, dport=10002)
    payload = ('hello' + '0123456789' * 200)[:size-len(eth/ip/udp/inet_p)]
    pkt = eth/ip/udp/GTP_U_Header(teid=teid)/inet_p/payload
    return bytes(pkt)

def get_inet_sequpdate_args(max_session, start_ue_ip):
    kwargs = {"fields": [
        {'offset': 30, 'size': 4, 'min': ip2long(start_ue_ip),
         'max': ip2long(start_ue_ip)+max_session-1}]}
    return kwargs

def gen_gtpu_sequpdate_args(max_session, start_ue_ip, ue_ip_offset, start_teid):
    kwargs = {"fields": [
        {'offset': 46, 'size': 4, 'min': start_teid,
         'max': start_teid+max_session-1},
        {'offset': ue_ip_offset, 'size': 4, 'min': ip2long(start_ue_ip),
         'max': ip2long(start_ue_ip)+max_session-1}]}
    return kwargs


# flow create 0 ingress pattern eth / ipv4 / udp / gtpu / ipv4 / end actions rss types ipv4 l3-src-only end key_len 0 queues end / end
n39_pkts = [gen_gtpu_packet(128, "22:53:7a:15:58:50", "9e:b2:d3:34:ab:27", "11.1.1.129", "198.18.0.1", "16.0.0.1", "9.9.9.9", 0x123456),]
n36_pkts = [gen_gtpu_packet(128, "22:53:7a:15:58:50", "9e:b2:d3:34:ab:27", "11.1.1.129", "198.18.0.1", "16.0.0.1", "6.6.6.6", 0x123456),]

# flow create 1 ingress pattern eth / ipv4 / udp / gtpu / ipv4 / end actions rss types ipv4 l3-dst-only end key_len 0 queues end / end
n9_pkts = [gen_gtpu_packet(128, "22:53:7a:15:58:50", "c2:9c:55:d4:8a:f6", "13.1.1.199", "198.19.0.1", "9.9.9.9", "16.0.0.1", 0x123456),]

#flow create 1 ingress pattern eth / ipv4 / end actions rss types ipv4 l3-dst-only end key_len 0 queues end / end
n6_pkts = [gen_inet_packet(128, "22:53:7a:15:58:50", "c2:9c:55:d4:8a:f6", "6.6.6.6", "16.0.0.1"),]

p = PMDPort(port_id=0)
pout::PortOut(port=p.name)

sim_total_flows = 5000
sim_start_ue_ip = "16.0.0.1"
sim_start_n3_teid = 0x30000000
sim_start_n9_teid = 0x90000000

n3seq_kwargs = gen_gtpu_sequpdate_args(sim_total_flows, sim_start_ue_ip, 62, sim_start_n3_teid)
n9seq_kwargs = gen_gtpu_sequpdate_args(sim_total_flows, sim_start_ue_ip, 66, sim_start_n9_teid)
n6seq_kwargs = get_inet_sequpdate_args(sim_total_flows, sim_start_ue_ip)

Source() -> Rewrite(templates=n39_pkts) -> n39update::SequentialUpdate(**n3seq_kwargs) -> L4Checksum() -> IPChecksum() -> pout
Source() -> Rewrite(templates=n36_pkts) -> n36update::SequentialUpdate(**n3seq_kwargs) -> L4Checksum() -> IPChecksum() -> pout

Source() -> Rewrite(templates=n9_pkts) -> n9update::SequentialUpdate(**n9seq_kwargs) -> L4Checksum() -> IPChecksum() -> pout
Source() -> Rewrite(templates=n6_pkts) -> n6update::SequentialUpdate(**n6seq_kwargs) -> L4Checksum() -> IPChecksum() -> pout
