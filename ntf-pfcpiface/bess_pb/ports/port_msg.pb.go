// Copyright (c) 2016-2017, Nefeli Networks, Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
//
// * Neither the names of the copyright holders nor the names of their
// contributors may be used to endorse or promote products derived from this
// software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        (unknown)
// source: ports/port_msg.proto

package bess_pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PCAPPortArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev string `protobuf:"bytes,1,opt,name=dev,proto3" json:"dev,omitempty"`
}

func (x *PCAPPortArg) Reset() {
	*x = PCAPPortArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ports_port_msg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCAPPortArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCAPPortArg) ProtoMessage() {}

func (x *PCAPPortArg) ProtoReflect() protoreflect.Message {
	mi := &file_ports_port_msg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCAPPortArg.ProtoReflect.Descriptor instead.
func (*PCAPPortArg) Descriptor() ([]byte, []int) {
	return file_ports_port_msg_proto_rawDescGZIP(), []int{0}
}

func (x *PCAPPortArg) GetDev() string {
	if x != nil {
		return x.Dev
	}
	return ""
}

type PMDPortArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loopback bool `protobuf:"varint,1,opt,name=loopback,proto3" json:"loopback,omitempty"`
	// Types that are assignable to Port:
	//	*PMDPortArg_PortId
	//	*PMDPortArg_Pci
	//	*PMDPortArg_Vdev
	Port isPMDPortArg_Port `protobuf_oneof:"port"`
	// See http://dpdk.org/doc/dts/test_plans/dual_vlan_test_plan.html
	VlanOffloadRxStrip  bool `protobuf:"varint,5,opt,name=vlan_offload_rx_strip,json=vlanOffloadRxStrip,proto3" json:"vlan_offload_rx_strip,omitempty"`
	VlanOffloadRxFilter bool `protobuf:"varint,6,opt,name=vlan_offload_rx_filter,json=vlanOffloadRxFilter,proto3" json:"vlan_offload_rx_filter,omitempty"`
	VlanOffloadRxQinq   bool `protobuf:"varint,7,opt,name=vlan_offload_rx_qinq,json=vlanOffloadRxQinq,proto3" json:"vlan_offload_rx_qinq,omitempty"`
	// Types that are assignable to Socket:
	//	*PMDPortArg_SocketId
	Socket          isPMDPortArg_Socket `protobuf_oneof:"socket"`
	PromiscuousMode bool                `protobuf:"varint,9,opt,name=promiscuous_mode,json=promiscuousMode,proto3" json:"promiscuous_mode,omitempty"`
	Hwcksum         bool                `protobuf:"varint,10,opt,name=hwcksum,proto3" json:"hwcksum,omitempty"`
}

func (x *PMDPortArg) Reset() {
	*x = PMDPortArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ports_port_msg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PMDPortArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMDPortArg) ProtoMessage() {}

func (x *PMDPortArg) ProtoReflect() protoreflect.Message {
	mi := &file_ports_port_msg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMDPortArg.ProtoReflect.Descriptor instead.
func (*PMDPortArg) Descriptor() ([]byte, []int) {
	return file_ports_port_msg_proto_rawDescGZIP(), []int{1}
}

func (x *PMDPortArg) GetLoopback() bool {
	if x != nil {
		return x.Loopback
	}
	return false
}

func (m *PMDPortArg) GetPort() isPMDPortArg_Port {
	if m != nil {
		return m.Port
	}
	return nil
}

func (x *PMDPortArg) GetPortId() uint64 {
	if x, ok := x.GetPort().(*PMDPortArg_PortId); ok {
		return x.PortId
	}
	return 0
}

func (x *PMDPortArg) GetPci() string {
	if x, ok := x.GetPort().(*PMDPortArg_Pci); ok {
		return x.Pci
	}
	return ""
}

func (x *PMDPortArg) GetVdev() string {
	if x, ok := x.GetPort().(*PMDPortArg_Vdev); ok {
		return x.Vdev
	}
	return ""
}

func (x *PMDPortArg) GetVlanOffloadRxStrip() bool {
	if x != nil {
		return x.VlanOffloadRxStrip
	}
	return false
}

func (x *PMDPortArg) GetVlanOffloadRxFilter() bool {
	if x != nil {
		return x.VlanOffloadRxFilter
	}
	return false
}

func (x *PMDPortArg) GetVlanOffloadRxQinq() bool {
	if x != nil {
		return x.VlanOffloadRxQinq
	}
	return false
}

func (m *PMDPortArg) GetSocket() isPMDPortArg_Socket {
	if m != nil {
		return m.Socket
	}
	return nil
}

func (x *PMDPortArg) GetSocketId() int32 {
	if x, ok := x.GetSocket().(*PMDPortArg_SocketId); ok {
		return x.SocketId
	}
	return 0
}

func (x *PMDPortArg) GetPromiscuousMode() bool {
	if x != nil {
		return x.PromiscuousMode
	}
	return false
}

func (x *PMDPortArg) GetHwcksum() bool {
	if x != nil {
		return x.Hwcksum
	}
	return false
}

type isPMDPortArg_Port interface {
	isPMDPortArg_Port()
}

type PMDPortArg_PortId struct {
	PortId uint64 `protobuf:"varint,2,opt,name=port_id,json=portId,proto3,oneof"`
}

type PMDPortArg_Pci struct {
	Pci string `protobuf:"bytes,3,opt,name=pci,proto3,oneof"`
}

type PMDPortArg_Vdev struct {
	Vdev string `protobuf:"bytes,4,opt,name=vdev,proto3,oneof"`
}

func (*PMDPortArg_PortId) isPMDPortArg_Port() {}

func (*PMDPortArg_Pci) isPMDPortArg_Port() {}

func (*PMDPortArg_Vdev) isPMDPortArg_Port() {}

type isPMDPortArg_Socket interface {
	isPMDPortArg_Socket()
}

type PMDPortArg_SocketId struct {
	SocketId int32 `protobuf:"varint,8,opt,name=socket_id,json=socketId,proto3,oneof"`
}

func (*PMDPortArg_SocketId) isPMDPortArg_Socket() {}

type UnixSocketPortArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Set the first character to "@" in place of \0 for abstract path
	/// See manpage for unix(7).
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	/// Minimum RX polling interval for system calls, when *idle*.
	/// Use a negative number for unthrottled polling. If unspecified or 0,
	/// it is set to 50,000 (50 microseconds, or 20k polls per second)
	MinRxIntervalNs int64 `protobuf:"varint,2,opt,name=min_rx_interval_ns,json=minRxIntervalNs,proto3" json:"min_rx_interval_ns,omitempty"`
	/// If set, the port driver will send a confirmation once
	/// the port is connected.  This lets pybess avoid a race during
	/// testing.  See bessctl/test_utils.py for details.
	ConfirmConnect bool `protobuf:"varint,3,opt,name=confirm_connect,json=confirmConnect,proto3" json:"confirm_connect,omitempty"`
}

func (x *UnixSocketPortArg) Reset() {
	*x = UnixSocketPortArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ports_port_msg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnixSocketPortArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnixSocketPortArg) ProtoMessage() {}

func (x *UnixSocketPortArg) ProtoReflect() protoreflect.Message {
	mi := &file_ports_port_msg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnixSocketPortArg.ProtoReflect.Descriptor instead.
func (*UnixSocketPortArg) Descriptor() ([]byte, []int) {
	return file_ports_port_msg_proto_rawDescGZIP(), []int{2}
}

func (x *UnixSocketPortArg) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *UnixSocketPortArg) GetMinRxIntervalNs() int64 {
	if x != nil {
		return x.MinRxIntervalNs
	}
	return 0
}

func (x *UnixSocketPortArg) GetConfirmConnect() bool {
	if x != nil {
		return x.ConfirmConnect
	}
	return false
}

type VPortArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ifname string `protobuf:"bytes,1,opt,name=ifname,proto3" json:"ifname,omitempty"`
	// Types that are assignable to Cpid:
	//	*VPortArg_Docker
	//	*VPortArg_ContainerPid
	//	*VPortArg_Netns
	Cpid       isVPortArg_Cpid `protobuf_oneof:"cpid"`
	RxqCpus    []int64         `protobuf:"varint,5,rep,packed,name=rxq_cpus,json=rxqCpus,proto3" json:"rxq_cpus,omitempty"`
	TxTci      uint64          `protobuf:"varint,6,opt,name=tx_tci,json=txTci,proto3" json:"tx_tci,omitempty"`
	TxOuterTci uint64          `protobuf:"varint,7,opt,name=tx_outer_tci,json=txOuterTci,proto3" json:"tx_outer_tci,omitempty"`
	Loopback   bool            `protobuf:"varint,8,opt,name=loopback,proto3" json:"loopback,omitempty"`
	IpAddrs    []string        `protobuf:"bytes,9,rep,name=ip_addrs,json=ipAddrs,proto3" json:"ip_addrs,omitempty"`
}

func (x *VPortArg) Reset() {
	*x = VPortArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ports_port_msg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPortArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPortArg) ProtoMessage() {}

func (x *VPortArg) ProtoReflect() protoreflect.Message {
	mi := &file_ports_port_msg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPortArg.ProtoReflect.Descriptor instead.
func (*VPortArg) Descriptor() ([]byte, []int) {
	return file_ports_port_msg_proto_rawDescGZIP(), []int{3}
}

func (x *VPortArg) GetIfname() string {
	if x != nil {
		return x.Ifname
	}
	return ""
}

func (m *VPortArg) GetCpid() isVPortArg_Cpid {
	if m != nil {
		return m.Cpid
	}
	return nil
}

func (x *VPortArg) GetDocker() string {
	if x, ok := x.GetCpid().(*VPortArg_Docker); ok {
		return x.Docker
	}
	return ""
}

func (x *VPortArg) GetContainerPid() int64 {
	if x, ok := x.GetCpid().(*VPortArg_ContainerPid); ok {
		return x.ContainerPid
	}
	return 0
}

func (x *VPortArg) GetNetns() string {
	if x, ok := x.GetCpid().(*VPortArg_Netns); ok {
		return x.Netns
	}
	return ""
}

func (x *VPortArg) GetRxqCpus() []int64 {
	if x != nil {
		return x.RxqCpus
	}
	return nil
}

func (x *VPortArg) GetTxTci() uint64 {
	if x != nil {
		return x.TxTci
	}
	return 0
}

func (x *VPortArg) GetTxOuterTci() uint64 {
	if x != nil {
		return x.TxOuterTci
	}
	return 0
}

func (x *VPortArg) GetLoopback() bool {
	if x != nil {
		return x.Loopback
	}
	return false
}

func (x *VPortArg) GetIpAddrs() []string {
	if x != nil {
		return x.IpAddrs
	}
	return nil
}

type isVPortArg_Cpid interface {
	isVPortArg_Cpid()
}

type VPortArg_Docker struct {
	Docker string `protobuf:"bytes,2,opt,name=docker,proto3,oneof"`
}

type VPortArg_ContainerPid struct {
	ContainerPid int64 `protobuf:"varint,3,opt,name=container_pid,json=containerPid,proto3,oneof"`
}

type VPortArg_Netns struct {
	Netns string `protobuf:"bytes,4,opt,name=netns,proto3,oneof"`
}

func (*VPortArg_Docker) isVPortArg_Cpid() {}

func (*VPortArg_ContainerPid) isVPortArg_Cpid() {}

func (*VPortArg_Netns) isVPortArg_Cpid() {}

var File_ports_port_msg_proto protoreflect.FileDescriptor

var file_ports_port_msg_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x73, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x62, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x62, 0x22,
	0x1f, 0x0a, 0x0b, 0x50, 0x43, 0x41, 0x50, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x76,
	0x22, 0xfc, 0x02, 0x0a, 0x0a, 0x50, 0x4d, 0x44, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x07, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x03, 0x70, 0x63, 0x69, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x70, 0x63, 0x69, 0x12, 0x14, 0x0a, 0x04, 0x76, 0x64,
	0x65, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x76, 0x64, 0x65, 0x76,
	0x12, 0x31, 0x0a, 0x15, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x72, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x76, 0x6c, 0x61, 0x6e, 0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x78, 0x53, 0x74,
	0x72, 0x69, 0x70, 0x12, 0x33, 0x0a, 0x16, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x72, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x76, 0x6c, 0x61, 0x6e, 0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x78, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72, 0x78, 0x5f, 0x71, 0x69, 0x6e, 0x71,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x76, 0x6c, 0x61, 0x6e, 0x4f, 0x66, 0x66, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x78, 0x51, 0x69, 0x6e, 0x71, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6d,
	0x69, 0x73, 0x63, 0x75, 0x6f, 0x75, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x63, 0x75, 0x6f, 0x75, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x77, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x77, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x42, 0x06, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x22,
	0x7d, 0x0a, 0x11, 0x55, 0x6e, 0x69, 0x78, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x41, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f,
	0x72, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x52, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x4e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x22, 0x8e,
	0x02, 0x0a, 0x08, 0x56, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x66, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x50, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x6e, 0x65, 0x74, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x78, 0x71, 0x5f, 0x63, 0x70, 0x75, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07,
	0x72, 0x78, 0x71, 0x43, 0x70, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x74, 0x63,
	0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x78, 0x54, 0x63, 0x69, 0x12, 0x20,
	0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x63, 0x69, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x63, 0x69,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x70, 0x69, 0x64, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ports_port_msg_proto_rawDescOnce sync.Once
	file_ports_port_msg_proto_rawDescData = file_ports_port_msg_proto_rawDesc
)

func file_ports_port_msg_proto_rawDescGZIP() []byte {
	file_ports_port_msg_proto_rawDescOnce.Do(func() {
		file_ports_port_msg_proto_rawDescData = protoimpl.X.CompressGZIP(file_ports_port_msg_proto_rawDescData)
	})
	return file_ports_port_msg_proto_rawDescData
}

var file_ports_port_msg_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ports_port_msg_proto_goTypes = []interface{}{
	(*PCAPPortArg)(nil),       // 0: bess.pb.PCAPPortArg
	(*PMDPortArg)(nil),        // 1: bess.pb.PMDPortArg
	(*UnixSocketPortArg)(nil), // 2: bess.pb.UnixSocketPortArg
	(*VPortArg)(nil),          // 3: bess.pb.VPortArg
}
var file_ports_port_msg_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ports_port_msg_proto_init() }
func file_ports_port_msg_proto_init() {
	if File_ports_port_msg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ports_port_msg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCAPPortArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ports_port_msg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PMDPortArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ports_port_msg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnixSocketPortArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ports_port_msg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPortArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ports_port_msg_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*PMDPortArg_PortId)(nil),
		(*PMDPortArg_Pci)(nil),
		(*PMDPortArg_Vdev)(nil),
		(*PMDPortArg_SocketId)(nil),
	}
	file_ports_port_msg_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*VPortArg_Docker)(nil),
		(*VPortArg_ContainerPid)(nil),
		(*VPortArg_Netns)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ports_port_msg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ports_port_msg_proto_goTypes,
		DependencyIndexes: file_ports_port_msg_proto_depIdxs,
		MessageInfos:      file_ports_port_msg_proto_msgTypes,
	}.Build()
	File_ports_port_msg_proto = out.File
	file_ports_port_msg_proto_rawDesc = nil
	file_ports_port_msg_proto_goTypes = nil
	file_ports_port_msg_proto_depIdxs = nil
}
