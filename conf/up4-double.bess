# vim: syntax=py
# -*- mode: python -*-
# SPDX-License-Identifier: Apache-2.0
# Copyright(c) 2019 Intel Corporation
#
# TODO/XXX/FIXME
# THIS FILE IS OUTDATED AND NEEDS TO BE REVISED TO MAKE IT FUNCTIONAL.
# PLEASE DON'T USE IT TILL FURTHER UPDATES
from conf.parser import *
import conf.ports as port
import conf.sim as sim

port.setup_globals()


# ====================================================
#	Read json config file (START HERE)
# ====================================================

Access = 1
Core = 2
Uplink = 0
Downlink = 1
FARForwardAction = 0
FARTunnelAction = 1
FARDropAction = 2
FARNotifyCPAction = 4
interfaces = ["s1u", "sgi"]
parser = Parser('conf/upf.json')
parser.parse(interfaces)

# Catch sgi & s1u MAC/IPv4 addresses
macstr_d = None
macstr_u = None
s1u_ip = None
if parser.mode == 'sim':
    macstr_d = '00:00:00:00:00:02'
    macstr_u = '00:00:00:00:00:01'
    s1u_ip = {0: '11.1.1.1'}
else:
    macstr_d = mac_by_interface(parser.sgi_ifname)
    macstr_u = mac_by_interface(parser.s1u_ifname)
    s1u_ip = ips_by_interface(parser.s1u_ifname)


inet_packets = [sim.gen_inet_packet(128, macstr_u, macstr_d, '172.16.100.1', '16.0.0.1'),
               sim.gen_inet_packet(128, macstr_u, macstr_d, '172.12.55.99', '16.0.0.1')]
ue_packets = [sim.gen_ue_packet(128, macstr_d, macstr_u, '11.1.1.128', '11.1.1.1', '16.0.0.1', '172.16.100.1')]
packet_generator = {'s1u': ue_packets, 'sgi': inet_packets}


# ====================================================
#       Core Setup
# ====================================================


# Initialize workers
cores = get_process_affinity()
for wid in range(parser.workers):
    bess.add_worker(wid=wid, core=int(cores[wid % len(cores)]))


# ====================================================
#       Port Setup
# ====================================================

ports = {}

for idx, iface in enumerate(interfaces):
    # check if source natting for a given port is required
    try:
        ext_addrs = parser.interfaces[iface]["ip_masquerade"]
    except KeyError:
        ext_addrs = None
    except TypeError:
        ext_addrs = None

    p = port.Port(parser.interfaces[iface]["ifname"], ext_addrs)
    if p.name in ports:
        continue

    # initialize port with the configured driver
    p.init_port(idx, parser.mode, parser.workers)

    # setup port module with auxiliary modules
    p.setup_port(parser.ip_frag_with_eth_mtu, parser.measure, packet_generator[iface])

    # Finally add entry to ports list
    ports[p.name] = p


# ====================================================
#       Downlink Pipeline
# ====================================================

# Pick fast-path gate for DL pipeline
sgiFastBPF = ports[parser.sgi_ifname].bpf
UEGate = 0
if ports[parser.sgi_ifname].ext_addrs is not None:
    UEGate = ports[parser.sgi_ifname].bpf_gate()
    ports[parser.sgi_ifname].bpf -> Sink()


# 1. Build initial DL pipeline here
sgiFastBPF:UEGate \
    -> sgiRxIPCksum::IPChecksum(verify=True, hw=True) \
    -> sgiRxUDPCksum::L4Checksum(verify=True, hw=True)

# Record last module to chain up optional modules
_in = sgiRxUDPCksum
gate = 0

# Append nat module (if enabled)
if ports[parser.sgi_ifname].nat is not None:
    _in:gate -> 1:ports[parser.sgi_ifname].nat
    _in = ports[parser.sgi_ifname].nat
    gate = 0

# Append sgiIP4Defrag module (if enabled)
if parser.max_ip_defrag_flows is not None:
    _in:gate -> sgiIP4Defrag::IPDefrag(num_flows=parser.max_ip_defrag_flows, numa=0)
    _in = sgiIP4Defrag
    gate = 1
    # Drop pkts that are unable to be fragmented
    sgiIP4Defrag:0 -> Sink()

# 2. Build the remaining first half of the DL pipeline before entering the shared pipeline
#ports[parser.sgi_ifname].rewrite \
_in:gate \
    -> DLPktParse::GtpuParser():1 \
    -> DLPDRLookup::WildcardMatch(fields=[{'attr_name':'tunnel_ipv4_dst', 'num_bytes':4}, \
                                          {'attr_name':'teid', 'num_bytes':4}, \
                                          {'attr_name':'dst_ip', 'num_bytes':4}, \
                                          {'attr_name':'src_ip', 'num_bytes':4}, \
                                          {'attr_name':'dst_port', 'num_bytes':2}, \
                                          {'attr_name':'src_port', 'num_bytes':2}, \
                                          {'attr_name':'ip_proto', 'num_bytes':1}], \
                                  values=[{'attr_name':'pdr_id', 'num_bytes':4}, \
                                          {'attr_name':'fseid', 'num_bytes':4}, \
                                          {'attr_name':'ctr_id', 'num_bytes':4}, \
                                          {'attr_name':'far_id', 'num_bytes':4}, \
                                          {'attr_name':'needs_gtpu_decap', 'num_bytes':1}]):1 \
    -> PreDLQoSCounter::Counter(name_id='ctr_id', check_exist=True, total=parser.max_sessions) \
    -> DLFARLookup::ExactMatch(fields=[{'attr_name':'far_id', 'num_bytes':4}, \
                                       {'attr_name':'fseid', 'num_bytes':4}], \
                               values=[{'attr_name':'action', 'num_bytes':1}, \
                                       {'attr_name':'tunnel_out_type', 'num_bytes':1}, \
                                       {'attr_name':'tunnel_out_src_ip4addr', 'num_bytes':4}, \
                                       {'attr_name':'tunnel_out_dst_ip4addr', 'num_bytes':4}, \
                                       {'attr_name':'tunnel_out_teid', 'num_bytes':4}, \
                                       {'attr_name':'tunnel_out_udp_port', 'num_bytes':2}]):1 \
    -> DLExecuteFAR::Split(size=1, attribute='action')

# Drop unknown packets
DLPktParse:0 -> Sink()
DLPDRLookup:0 -> Sink()
DLFARLookup:0 -> Sink()
DLExecuteFAR:FARDropAction -> DLFARDrop::Sink()
DLExecuteFAR:FARNotifyCPAction -> DLFARNotifyCP::Sink()

# Set default gates for relevant modules
DLPDRLookup.set_default_gate(gate=0)
DLFARLookup.set_default_gate(gate=0)

# 3. Complete the last part of the DL pipeline
DLExecuteFAR:FARTunnelAction \
    -> EtherEncapTrim::GenericDecap(bytes=14) \
    -> GTPUEncap::GtpuEncap():1 \
    -> S1UEtherAdd::GenericEncap(fields=[
        {'size': 6, 'value': {'value_int': 0x0}},
        {'size': 6, 'value': {'value_int': mac2hex(macstr_u)}},
        {'size': 2, 'value': {'value_int': 0x0800}}]) \
    -> PostDLQoSCounter::Counter(name_id='ctr_id', check_exist=True, total=parser.max_sessions) \
    -> OuterUDPCsum::L4Checksum() \
    -> OuterIPCsum::IPChecksum() \
    -> ports[parser.s1u_ifname].rtr

# Drop unknown packets
GTPUEncap:0 -> Sink()
sgiRxIPCksum:1 -> Sink()
sgiRxUDPCksum:1 -> Sink()
OuterIPCsum:1 -> Sink()
OuterUDPCsum:1 -> Sink()

# Add SGi filter rules, i.e.:
# setting filter to detect ue_filter traffic
# the filter can either be based on the NAT IP addr(s),
# or ue IP addr subnet
if ports[parser.sgi_ifname].nat is not None:
    ue_filter = {"priority": -UEGate,
                 "filter": "ip dst {}".format(ports[parser.sgi_ifname].ext_addrs), "gate": UEGate}
    sgiFastBPF.add(filters=[ue_filter])


# ====================================================
#       Uplink Pipeline
# ====================================================


# Pick fast-path and echo gates for UL pipeline
s1uFastBPF = ports[parser.s1u_ifname].bpf
GTPUGate = 0


# 1. Build initial UL pipeline here
s1uFastBPF:GTPUGate \
    -> s1uRxIPCksum::IPChecksum(verify=True, hw=True) \
    -> s1uRxUDPCksum::L4Checksum(verify=True, hw=True)

# Record last module to chain up option modules
_in = s1uRxUDPCksum
gate = 0

# Append s1uIP4Defrag module (if enabled)
if parser.max_ip_defrag_flows is not None:
    _in:gate ->s1uIP4Defrag::IPDefrag(num_flows=parser.max_ip_defrag_flows, numa=0)
    _in = s1uIP4Defrag
    gate = 1
    # Drop pkts that are unable to be fragmented
    s1uIP4Defrag:0 -> Sink()

# 2. Build the remaining first half of the UL pipeline before entering the shard pipeline
#ports[parser.s1u_ifname].rewrite \
_in:gate \
    -> ULPktParse::GtpuParser():1 \
    -> ULPDRLookup::WildcardMatch(fields=[{'attr_name':'tunnel_ipv4_dst', 'num_bytes':4}, \
                                          {'attr_name':'teid', 'num_bytes':4}, \
                                          {'attr_name':'dst_ip', 'num_bytes':4}, \
                                          {'attr_name':'src_ip', 'num_bytes':4}, \
                                          {'attr_name':'dst_port', 'num_bytes':2}, \
                                          {'attr_name':'src_port', 'num_bytes':2}, \
                                          {'attr_name':'ip_proto', 'num_bytes':1}], \
                                  values=[{'attr_name':'pdr_id', 'num_bytes':4}, \
                                          {'attr_name':'fseid', 'num_bytes':4}, \
                                          {'attr_name':'ctr_id', 'num_bytes':4}, \
                                          {'attr_name':'far_id', 'num_bytes':4}, \
                                          {'attr_name':'needs_gtpu_decap', 'num_bytes':1}]):1 \
    -> PreULQoSCounter::Counter(name_id='ctr_id', check_exist=True, total=parser.max_sessions) \
    -> ULFARLookup::ExactMatch(fields=[{'attr_name':'far_id', 'num_bytes':4}, \
                                       {'attr_name':'fseid', 'num_bytes':4}], \
                               values=[{'attr_name':'action', 'num_bytes':1}, \
                                       {'attr_name':'tunnel_out_type', 'num_bytes':1}, \
                                       {'attr_name':'tunnel_out_src_ip4addr', 'num_bytes':4}, \
                                       {'attr_name':'tunnel_out_dst_ip4addr', 'num_bytes':4}, \
                                       {'attr_name':'tunnel_out_teid', 'num_bytes':4}, \
                                       {'attr_name':'tunnel_out_udp_port', 'num_bytes':2}]):1 \
    -> ULExecuteFAR::Split(size=1, attribute='action')

# Drop unknown packets
ULPktParse:0 -> Sink()
ULPDRLookup:0 -> Sink()
ULFARLookup:0 -> Sink()
ULExecuteFAR:FARDropAction -> ULFARDrop::Sink()
ULExecuteFAR:FARNotifyCPAction -> ULFARNotifyCP::Sink()

# Set default gates for relevant modules
ULPDRLookup.set_default_gate(gate=0)
ULFARLookup.set_default_gate(gate=0)

# 3. Complete the last part of the UL pipeline
ULExecuteFAR:FARForwardAction \
    -> EtherDecapTrim::GenericDecap(bytes=14) -> GTPUDecap::GtpuDecap() \
    -> SGIEtherAdd::GenericEncap(fields=[
        {'size': 6, 'value': {'value_int': 0x0}},
        {'size': 6, 'value': {'value_int': mac2hex(macstr_d)}},
        {'size': 2, 'value': {'value_int': 0x0800}}]) \
    -> PostULQoSCounter::Counter(name_id='ctr_id', check_exist=True, total=parser.max_sessions) \
    -> ports[parser.sgi_ifname].rtr

# 4. GTP Echo response pipeline
GTPUEcho::GtpuEcho(s1u_sgw_ip=ip2long(s1u_ip[0])):1 \
    -> EthSwap::MACSwap() \
    -> 1:OuterUDPCsum

# Drop unknown packets
GTPUEcho:0 -> Sink()
s1uRxIPCksum:1 -> Sink()
s1uRxUDPCksum:1 -> Sink()

# Add S1u filter rules, i.e.:
# setting filter to detect gtpu traffic
# and dst host 11.1.1.1                         # check S/PGWU IP
# and udp dst port 2152                         # check GTPU port
check_ip = "ip"
check_spgwu_ip = " and dst host " + \
    " or ".join(str(x) for x in s1u_ip)
check_gtpu_port = " and udp dst port 2152"

# PDU rule
uplink_filter = {"priority": -GTPUGate, "filter": check_ip +
               check_spgwu_ip + check_gtpu_port, "gate": GTPUGate}
s1uFastBPF.add(filters=[uplink_filter])


# ====================================================
#       Route Control
# ====================================================
# Finally send SIGHUP to route_control daemon on reload
# TODO: behavior is unspecified if route_control.py pid is not found
route_control_pid = getpythonpid('route_control.py')
if route_control_pid:
    os.kill(route_control_pid, signal.SIGHUP)
