From ef51d92e3e8660869ec2a226342fc7fe1842b2dc Mon Sep 17 00:00:00 2001
From: Muhammad Asim Jamshed <muhammad.jamshed@intel.com>
Date: Wed, 22 Apr 2020 19:00:50 -0700
Subject: [PATCH] Added module messages for new modules.

Signed-off-by: Muhammad Asim Jamshed <muhammad.jamshed@intel.com>
---
 protobuf/module_msg.proto | 80 +++++++++++++++++++++++++++++++++++++++
 1 file changed, 80 insertions(+)

diff --git a/protobuf/module_msg.proto b/protobuf/module_msg.proto
index 2aeaf47e..716b3870 100644
--- a/protobuf/module_msg.proto
+++ b/protobuf/module_msg.proto
@@ -982,6 +982,86 @@ message SourceArg {
   uint64 pkt_size = 1; /// The size (in bytes) of packet data to produce.
 }
 
+/**
+ * The GtpuEcho module processes the GTPv1 echo packet and prepares
+ * corresponding IP packet containing GTP echo response. It assumes
+ * Recovery IE is always zero.
+ *
+ * __Input Gates__: 1
+ * __Output Gates__: 1
+ */
+message GtpuEchoArg {
+  uint32 s1u_sgw_ip = 1; /// IP address of S1U interface
+}
+
+/**
+ * The IPDefrag module scans the IP datagram and checks whether
+ * it is fragmented. It returns a fully reassembled datagram or
+ * an unfragmented IP datagram
+ *
+ * __Input Gates__: 1
+ * __Output Gates__: 1
+ */
+message IPDefragArg {
+  uint32 num_flows = 1; /// max number of flows the module can handle
+  int32 numa = 2; /// numa placement for ip frags memory management
+}
+
+/**
+ * The IPDFrag module scans the IP datagram and checks whether
+ * it needs to be fragmented.
+ *
+ * __Input Gates__: 1
+ * __Output Gates__: 1
+ */
+message IPFragArg {
+  int32 mtu = 1; /// full Ethernet frame size (including CRC) for encapsulated ipv4 frag datagrams
+}
+
+/**
+ * The GtpuDecap module trims the GTPU header from the Ethernet frame
+ *
+ * __Input Gates__: 1
+ * __Output Gates__: 2
+ */
+message GtpuDecapArg {
+  string ename = 1; /// name of gtpencap module
+}
+
+/**
+ * The GtpuEncap module encapsulates an IP packet for tunnelling purposes
+ *
+ * __Input Gates__: 1
+ * __Output Gates__: 1
+ */
+message GtpuEncapArg {
+  uint32 s1u_sgw_ip = 1; /// IP address of S1U interface
+  uint32 num_subscribers = 2; /// Number of subscribers limit
+}
+
+/**
+ * The GtpuEncap module has a command `add(...)` which takes two
+ * parameters.  This function accepts the teids, and UE IP address, and creates
+ * a session record.
+ * Example use in bessctl: `gencap.add(teid=0xf0000000, eteid=..., ueaddr=0x10000001, enodeb_ip=...)`
+ */
+message GtpuEncapAddSessionRecordArg {
+  uint32 teid = 1; /// sgw tunnel endpoint identifier
+  uint32 eteid = 2; /// enodeb tunnel endpoint identifier
+  uint32 ueaddr = 3; /// ip address of UE
+  uint32 enodeb_ip = 4; /// enodeb ip address
+}
+
+/**
+ * The GtpuEncap module has a command `remove(...)` which takes one
+ * parameter.  This function accepts the ueaddr, and removes the
+ * respective session record.
+ * Example use in bessctl: `gencap.remove(ueaddr=0x10000001)`
+ */
+message GtpuEncapRemoveSessionRecordArg {
+  uint32 ueaddr = 1; /// ip address of UE
+}
+
 /**
  * The Split module is a basic classifier which directs packets out a gate
  * based on data in the packet (e.g., if the read in value is 3, the packet
-- 
2.25.1

