From 6c482f00a9ad08088ba3957a58f1651f4e374d25 Mon Sep 17 00:00:00 2001
From: Muhammad Asim Jamshed <muhammad.jamshed@intel.com>
Date: Fri, 17 Jul 2020 17:19:11 -0700
Subject: [PATCH] Add hardware rx checksum offload option for checksum.

Signed-off-by: Muhammad Asim Jamshed <muhammad.jamshed@intel.com>
---
 core/modules/ip_checksum.cc | 17 ++++++++++++++---
 core/modules/ip_checksum.h  |  6 +++++-
 core/modules/l4_checksum.cc | 43 ++++++++++++++++++++++++++++++++++---------
 core/modules/l4_checksum.h  |  5 ++++-
 4 files changed, 57 insertions(+), 14 deletions(-)

diff --git a/core/modules/ip_checksum.cc b/core/modules/ip_checksum.cc
index ecaba24..47f86ba 100644
--- a/core/modules/ip_checksum.cc
+++ b/core/modules/ip_checksum.cc
@@ -56,8 +56,8 @@ void IPChecksum::ProcessBatch(Context *ctx, bess::PacketBatch *batch) {
       data = qinq + 1;
       ether_type = qinq->ether_type;
       if (ether_type != be16_t(Ethernet::Type::kVlan)) {
-	EmitPacket(ctx, batch->pkts()[i], FORWARD_GATE);
-	continue;
+        EmitPacket(ctx, batch->pkts()[i], FORWARD_GATE);
+        continue;
       }
     }
 
@@ -75,7 +75,17 @@ void IPChecksum::ProcessBatch(Context *ctx, bess::PacketBatch *batch) {
     }
 
     if (verify_) {
-      EmitPacket(ctx, batch->pkts()[i], (VerifyIpv4Checksum(*ip)) ? FORWARD_GATE : FAIL_GATE);
+      if (hw_) {
+        struct rte_mbuf *m = (struct rte_mbuf *)batch->pkts()[i];
+        if (unlikely((m->ol_flags & PKT_RX_IP_CKSUM_MASK) ==
+                     PKT_RX_IP_CKSUM_BAD))
+          EmitPacket(ctx, (bess::Packet *)m, FAIL_GATE);
+        else
+          EmitPacket(ctx, (bess::Packet *)m, FORWARD_GATE);
+      } else {
+        EmitPacket(ctx, batch->pkts()[i],
+                   (VerifyIpv4Checksum(*ip)) ? FORWARD_GATE : FAIL_GATE);
+      }
     } else {
       ip->checksum = CalculateIpv4Checksum(*ip);
       EmitPacket(ctx, batch->pkts()[i], FORWARD_GATE);
@@ -85,6 +95,7 @@ void IPChecksum::ProcessBatch(Context *ctx, bess::PacketBatch *batch) {
 
 CommandResponse IPChecksum::Init(const bess::pb::IPChecksumArg &arg) {
   verify_ = arg.verify();
+  hw_ = arg.hw();
   return CommandSuccess();
 }
 
diff --git a/core/modules/ip_checksum.h b/core/modules/ip_checksum.h
index f0f1d07..94e0d72 100644
--- a/core/modules/ip_checksum.h
+++ b/core/modules/ip_checksum.h
@@ -37,7 +37,9 @@
 // Compute IP checksum on packet
 class IPChecksum final : public Module {
  public:
-  IPChecksum() : Module(), verify_(false) { max_allowed_workers_ = Worker::kMaxWorkers; }
+  IPChecksum() : Module(), verify_(false) {
+    max_allowed_workers_ = Worker::kMaxWorkers;
+  }
 
   /* Gates: (0) Default, (1) Drop */
   static const gate_idx_t kNumOGates = 2;
@@ -47,6 +49,8 @@ class IPChecksum final : public Module {
  private:
   /* enable checksum verification */
   bool verify_;
+  /* enable hardware offload */
+  bool hw_;
 };
 
 #endif  // BESS_MODULES_IP_CHECKSUM_H_
diff --git a/core/modules/l4_checksum.cc b/core/modules/l4_checksum.cc
index 3ad1f23..20faa85 100644
--- a/core/modules/l4_checksum.cc
+++ b/core/modules/l4_checksum.cc
@@ -63,27 +63,52 @@ void L4Checksum::ProcessBatch(Context *ctx, bess::PacketBatch *batch) {
       Udp *udp =
           reinterpret_cast<Udp *>(reinterpret_cast<uint8_t *>(ip) + ip_bytes);
       if (verify_) {
-	EmitPacket(ctx, batch->pkts()[i],
-		   (VerifyIpv4UdpChecksum(*ip, *udp)) ? FORWARD_GATE : FAIL_GATE);
+        if (hw_) {
+          struct rte_mbuf *m = (struct rte_mbuf *)batch->pkts()[i];
+          if (unlikely((m->ol_flags & PKT_RX_L4_CKSUM_MASK) ==
+                       PKT_RX_L4_CKSUM_BAD))
+            EmitPacket(ctx, (bess::Packet *)m, FAIL_GATE);
+          else
+            EmitPacket(ctx, (bess::Packet *)m, FORWARD_GATE);
+        } else {
+          EmitPacket(
+              ctx, batch->pkts()[i],
+              (VerifyIpv4UdpChecksum(*ip, *udp)) ? FORWARD_GATE : FAIL_GATE);
+        }
       } else {
-	udp->checksum = CalculateIpv4UdpChecksum(*ip, *udp);
-	EmitPacket(ctx, batch->pkts()[i], FORWARD_GATE);
+        udp->checksum = CalculateIpv4UdpChecksum(*ip, *udp);
+        EmitPacket(ctx, batch->pkts()[i], FORWARD_GATE);
       }
     } else if (ip->protocol == Ipv4::Proto::kTcp) {
       size_t ip_bytes = (ip->header_length) << 2;
       Tcp *tcp =
           reinterpret_cast<Tcp *>(reinterpret_cast<uint8_t *>(ip) + ip_bytes);
-      if (verify_)
-	EmitPacket(ctx, batch->pkts()[i],
-		   (VerifyIpv4TcpChecksum(*ip, *tcp)) ? FORWARD_GATE : FAIL_GATE);
-      else
-	tcp->checksum = CalculateIpv4TcpChecksum(*ip, *tcp);
+      if (verify_) {
+        if (hw_) {
+          struct rte_mbuf *m = (struct rte_mbuf *)batch->pkts()[i];
+          if (unlikely((m->ol_flags & PKT_RX_L4_CKSUM_MASK) ==
+                       PKT_RX_L4_CKSUM_BAD))
+            EmitPacket(ctx, (bess::Packet *)m, FAIL_GATE);
+          else
+            EmitPacket(ctx, (bess::Packet *)m, FORWARD_GATE);
+        } else {
+          EmitPacket(
+              ctx, batch->pkts()[i],
+              (VerifyIpv4TcpChecksum(*ip, *tcp)) ? FORWARD_GATE : FAIL_GATE);
+        }
+      } else {
+        tcp->checksum = CalculateIpv4TcpChecksum(*ip, *tcp);
+        EmitPacket(ctx, batch->pkts()[i], FORWARD_GATE);
+      }
+    } else { /* fail-safe condition */
+      EmitPacket(ctx, batch->pkts()[i], FORWARD_GATE);
     }
   }
 }
 
 CommandResponse L4Checksum::Init(const bess::pb::L4ChecksumArg &arg) {
   verify_ = arg.verify();
+  hw_ = arg.hw();
   return CommandSuccess();
 }
 
diff --git a/core/modules/l4_checksum.h b/core/modules/l4_checksum.h
index 27ab8f9..56d8ae5 100644
--- a/core/modules/l4_checksum.h
+++ b/core/modules/l4_checksum.h
@@ -36,7 +36,9 @@
 // Compute L4 checksum on packet
 class L4Checksum final : public Module {
  public:
- L4Checksum() : Module(), verify_(false) { max_allowed_workers_ = Worker::kMaxWorkers; }
+  L4Checksum() : Module(), verify_(false) {
+    max_allowed_workers_ = Worker::kMaxWorkers;
+  }
 
   /* Gates: (0) Default, (1) Drop */
   static const gate_idx_t kNumOGates = 2;
@@ -46,6 +48,7 @@ class L4Checksum final : public Module {
 
  private:
   bool verify_;
+  bool hw_;
 };
 
 #endif  // BESS_MODULES_L4_CHECKSUM_H_
-- 
2.7.4

