From 897c5a063be06bc092a597a6385e8eb330d6454f Mon Sep 17 00:00:00 2001
From: Muhammad Asim Jamshed <muhammad.jamshed@intel.com>
Date: Wed, 22 Apr 2020 12:52:16 -0700
Subject: [PATCH] Use Packet Metadata for Measure module.

Signed-off-by: Muhammad Asim Jamshed <muhammad.jamshed@intel.com>
---
 core/modules/measure.cc   | 11 ++++++++---
 core/modules/timestamp.cc | 10 ++++++++--
 2 files changed, 16 insertions(+), 5 deletions(-)

diff --git a/core/modules/measure.cc b/core/modules/measure.cc
index 5d71d482..cd5c7e5d 100644
--- a/core/modules/measure.cc
+++ b/core/modules/measure.cc
@@ -63,6 +63,7 @@ const Commands Measure::cmds = {
 CommandResponse Measure::Init(const bess::pb::MeasureArg &arg) {
   uint64_t latency_ns_max = arg.latency_ns_max();
   uint64_t latency_ns_resolution = arg.latency_ns_resolution();
+
   if (latency_ns_max == 0) {
     latency_ns_max = kDefaultMaxNs;
   }
@@ -85,7 +86,9 @@ CommandResponse Measure::Init(const bess::pb::MeasureArg &arg) {
   if (arg.offset()) {
     offset_ = arg.offset();
   } else {
-    offset_ = sizeof(Ethernet) + sizeof(Ipv4) + sizeof(Udp);
+    offset_ = INT_MAX;
+    using AccessMode = bess::metadata::Attribute::AccessMode;
+    AddMetadataAttr("timestamp", sizeof(uint64_t), AccessMode::kRead);
   }
 
   if (arg.jitter_sample_prob()) {
@@ -111,8 +114,10 @@ void Measure::ProcessBatch(Context *ctx, bess::PacketBatch *batch) {
 
   int cnt = batch->cnt();
   for (int i = 0; i < cnt; i++) {
-    uint64_t pkt_time;
-    if (IsTimestamped(batch->pkts()[i], offset, &pkt_time)) {
+    uint64_t pkt_time = 0;
+    if (offset == INT_MAX)
+      pkt_time = get_attr<uint64_t>(this, 0, batch->pkts()[i]);
+    if (pkt_time || IsTimestamped(batch->pkts()[i], offset, &pkt_time)) {
       uint64_t diff;
 
       if (now_ns >= pkt_time) {
diff --git a/core/modules/timestamp.cc b/core/modules/timestamp.cc
index b2489c76..049df739 100644
--- a/core/modules/timestamp.cc
+++ b/core/modules/timestamp.cc
@@ -65,8 +65,11 @@ CommandResponse Timestamp::Init(const bess::pb::TimestampArg &arg) {
   if (arg.offset()) {
     offset_ = arg.offset();
   } else {
-    offset_ = sizeof(Ethernet) + sizeof(Ipv4) + sizeof(Udp);
+    offset_ = INT_MAX;
+    using AccessMode = bess::metadata::Attribute::AccessMode;
+    AddMetadataAttr("timestamp", sizeof(uint64_t), AccessMode::kWrite);
   }
+
   return CommandSuccess();
 }
 
@@ -77,7 +80,10 @@ void Timestamp::ProcessBatch(Context *ctx, bess::PacketBatch *batch) {
 
   int cnt = batch->cnt();
   for (int i = 0; i < cnt; i++) {
-    timestamp_packet(batch->pkts()[i], offset, now_ns);
+    if (offset == INT_MAX)
+      set_attr<uint64_t>(this, 0, batch->pkts()[i], now_ns);
+    else
+      timestamp_packet(batch->pkts()[i], offset, now_ns);
   }
 
   RunNextModule(ctx, batch);
-- 
2.25.1

