From 97ddc992baca798138accd18af5c7274e045a855 Mon Sep 17 00:00:00 2001
From: Muhammad Asim Jamshed <muhammad.jamshed@intel.com>
Date: Fri, 17 Jul 2020 17:15:41 -0700
Subject: [PATCH] Adding value attributes to ExactMatch & WildcardMatch.

---
 core/modules/exact_match.cc    | 146 ++++++++++++++++++++++----
 core/modules/exact_match.h     | 180 +++++++++++++++++++++++++++++++--
 core/modules/wildcard_match.cc | 146 +++++++++++++++++++++++---
 core/modules/wildcard_match.h  |  35 +++++--
 4 files changed, 458 insertions(+), 49 deletions(-)

diff --git a/core/modules/exact_match.cc b/core/modules/exact_match.cc
index 072a0333..1ca0fd4e 100644
--- a/core/modules/exact_match.cc
+++ b/core/modules/exact_match.cc
@@ -50,20 +50,21 @@ const Commands ExactMatch::cmds = {
     {"set_runtime_config", "ExactMatchConfig",
      MODULE_CMD_FUNC(&ExactMatch::SetRuntimeConfig), Command::THREAD_UNSAFE},
     {"add", "ExactMatchCommandAddArg", MODULE_CMD_FUNC(&ExactMatch::CommandAdd),
-     Command::THREAD_UNSAFE},
+     Command::THREAD_SAFE},
     {"delete", "ExactMatchCommandDeleteArg",
-     MODULE_CMD_FUNC(&ExactMatch::CommandDelete), Command::THREAD_UNSAFE},
+     MODULE_CMD_FUNC(&ExactMatch::CommandDelete), Command::THREAD_SAFE},
     {"clear", "EmptyArg", MODULE_CMD_FUNC(&ExactMatch::CommandClear),
-     Command::THREAD_UNSAFE},
+     Command::THREAD_SAFE},
     {"set_default_gate", "ExactMatchCommandSetDefaultGateArg",
      MODULE_CMD_FUNC(&ExactMatch::CommandSetDefaultGate),
      Command::THREAD_SAFE}};
 
 CommandResponse ExactMatch::AddFieldOne(const bess::pb::Field &field,
                                         const bess::pb::FieldData &mask,
-                                        int idx) {
+                                        int idx, Type t) {
   int size = field.num_bytes();
   uint64_t mask64 = 0;
+
   if (mask.encoding_case() == bess::pb::FieldData::kValueInt) {
     mask64 = mask.value_int();
   } else if (mask.encoding_case() == bess::pb::FieldData::kValueBin) {
@@ -73,12 +74,15 @@ CommandResponse ExactMatch::AddFieldOne(const bess::pb::Field &field,
 
   Error ret;
   if (field.position_case() == bess::pb::Field::kAttrName) {
-    ret = table_.AddField(this, field.attr_name(), size, mask64, idx);
+    ret = (t == FIELD_TYPE)
+              ? table_.AddField(this, field.attr_name(), size, mask64, idx)
+              : AddValue(this, field.attr_name(), size, mask64, idx);
     if (ret.first) {
       return CommandFailure(ret.first, "%s", ret.second.c_str());
     }
   } else if (field.position_case() == bess::pb::Field::kOffset) {
-    ret = table_.AddField(field.offset(), size, mask64, idx);
+    ret = (t == FIELD_TYPE) ? table_.AddField(field.offset(), size, mask64, idx)
+                            : AddValue(field.offset(), size, mask64, idx);
     if (ret.first) {
       return CommandFailure(ret.first, "%s", ret.second.c_str());
     }
@@ -103,9 +107,25 @@ CommandResponse ExactMatch::Init(const bess::pb::ExactMatchArg &arg) {
 
     if (empty_masks_) {
       bess::pb::FieldData emptymask;
-      err = AddFieldOne(arg.fields(i), emptymask, i);
+      err = AddFieldOne(arg.fields(i), emptymask, i, FIELD_TYPE);
+    } else {
+      err = AddFieldOne(arg.fields(i), arg.masks(i), i, FIELD_TYPE);
+    }
+
+    if (err.error().code() != 0) {
+      return err;
+    }
+  }
+
+  empty_masks_ = arg.masksv_size() == 0;
+  for (auto i = 0; i < arg.values_size(); ++i) {
+    CommandResponse err;
+
+    if (empty_masks_) {
+      bess::pb::FieldData emptymask;
+      err = AddFieldOne(arg.values(i), emptymask, i, VALUE_TYPE);
     } else {
-      err = AddFieldOne(arg.fields(i), arg.masks(i), i);
+      err = AddFieldOne(arg.values(i), arg.masksv(i), i, VALUE_TYPE);
     }
 
     if (err.error().code() != 0) {
@@ -157,7 +177,7 @@ CommandResponse ExactMatch::GetRuntimeConfig(const bess::pb::EmptyArg &) {
     auto const &value = kv.second;
     rule_t *rule = r.add_rules();
 
-    rule->set_gate(value);
+    rule->set_gate(value.gate);
     for (size_t i = 0; i < table_.num_fields(); i++) {
       const ExactMatchField &f = table_.get_field(i);
       bess::pb::FieldData *field = rule->add_fields();
@@ -199,9 +219,30 @@ Error ExactMatch::AddRule(const bess::pb::ExactMatchCommandAddArg &arg) {
   }
 
   ExactMatchRuleFields rule;
-  RuleFieldsFromPb(arg.fields(), &rule);
+  ExactMatchRuleFields action;
+  Error err;
+  ValueTuple t;
+
+  /* clear value tuple  */
+  memset(&t.action, 0, sizeof(t.action));
+  /* set gate */
+  t.gate = gate;
+  RuleFieldsFromPb(arg.fields(), &rule, FIELD_TYPE);
+  /* check whether values match with the the table's */
+  if (arg.values_size() != (ssize_t)num_values())
+    return std::make_pair(
+        EINVAL, bess::utils::Format(
+                    "rule has incorrect number of values. Need %d, has %d",
+                    (int)num_values(), arg.values_size()));
+  /* check if values are non-zero */
+  if (arg.values_size() > 0) {
+    RuleFieldsFromPb(arg.values(), &action, VALUE_TYPE);
+
+    if ((err = CreateValue(t.action, action)).first != 0)
+      return err;
+  }
 
-  return table_.AddRule(gate, rule);
+  return table_.AddRule(t, rule);
 }
 
 // Uses an ExactMatchConfig to restore this module's runtime config.
@@ -221,6 +262,53 @@ CommandResponse ExactMatch::SetRuntimeConfig(
   return CommandSuccess();
 }
 
+void ExactMatch::setValues(bess::Packet *pkt, ExactMatchKey &action) {
+  size_t num_values_ = num_values();
+
+  for (size_t i = 0; i < num_values_; i++) {
+    int value_size = get_value(i).size;
+    int value_pos = get_value(i).pos;
+    int value_off = get_value(i).offset;
+    int value_attr_id = get_value(i).attr_id;
+    uint8_t *data = pkt->head_data<uint8_t *>() + value_off;
+
+    if (value_attr_id < 0) { /* if it is offset-based */
+      memcpy(data, reinterpret_cast<uint8_t *>(&action) + value_pos,
+             value_size);
+    } else { /* if it is attribute-based */
+      switch (value_size) {
+        case 1:
+          set_attr<uint8_t>(this, value_attr_id, pkt,
+                            *((uint8_t *)((uint8_t *)&action + value_pos)));
+          break;
+        case 2:
+          set_attr<uint16_t>(this, value_attr_id, pkt,
+                             *((uint16_t *)((uint8_t *)&action + value_pos)));
+          break;
+        case 4:
+          set_attr<uint32_t>(this, value_attr_id, pkt,
+                             *((uint32_t *)((uint8_t *)&action + value_pos)));
+          break;
+        case 8:
+          set_attr<uint64_t>(this, value_attr_id, pkt,
+                             *((uint64_t *)((uint8_t *)&action + value_pos)));
+          break;
+        default: {
+          typedef struct {
+            uint8_t bytes[bess::metadata::kMetadataAttrMaxSize];
+          } value_t;
+          void *mt_ptr =
+              _ptr_attr_with_offset<value_t>(attr_offset(value_attr_id), pkt);
+          bess::utils::CopySmall(
+              mt_ptr,
+              reinterpret_cast<uint8_t *>(((uint8_t *)(&action)) + value_pos),
+              value_size);
+        } break;
+      }
+    }
+  }
+}
+
 void ExactMatch::ProcessBatch(Context *ctx, bess::PacketBatch *batch) {
   gate_idx_t default_gate;
   ExactMatchKey keys[bess::PacketBatch::kMaxBurst] __ymm_aligned;
@@ -237,9 +325,18 @@ void ExactMatch::ProcessBatch(Context *ctx, bess::PacketBatch *batch) {
   table_.MakeKeys(batch, buffer_fn, keys);
 
   int cnt = batch->cnt();
+  Value default_value(default_gate);
+
   for (int i = 0; i < cnt; i++) {
     bess::Packet *pkt = batch->pkts()[i];
-    EmitPacket(ctx, pkt, table_.Find(keys[i], default_gate));
+    ValueTuple res;
+    res = table_.Find(keys[i], default_value);
+    if (res.gate != default_gate) {
+      /* setting respecive values */
+      setValues(pkt, res.action);
+    }
+    gate_idx_t g = res.gate;
+    EmitPacket(ctx, pkt, g);
   }
 }
 
@@ -250,20 +347,35 @@ std::string ExactMatch::GetDesc() const {
 
 void ExactMatch::RuleFieldsFromPb(
     const RepeatedPtrField<bess::pb::FieldData> &fields,
-    bess::utils::ExactMatchRuleFields *rule) {
+    bess::utils::ExactMatchRuleFields *rule, Type type) {
   for (auto i = 0; i < fields.size(); i++) {
-    int field_size = table_.get_field(i).size;
+    (void)type;
+    int field_size =
+        (type == FIELD_TYPE) ? table_.get_field(i).size : get_value(i).size;
+    int attr_id = (type == FIELD_TYPE) ? table_.get_field(i).attr_id
+                                       : get_value(i).attr_id;
 
     bess::pb::FieldData current = fields.Get(i);
-
     if (current.encoding_case() == bess::pb::FieldData::kValueBin) {
       const std::string &f_obj = fields.Get(i).value_bin();
       rule->push_back(std::vector<uint8_t>(f_obj.begin(), f_obj.end()));
     } else {
       rule->emplace_back();
-      uint64_t rule64 = current.value_int();
+      uint64_t rule64 = 0;
+      if (attr_id < 0) {
+        if (!bess::utils::uint64_to_bin(&rule64, current.value_int(),
+                                        field_size, 1)) {
+          std::cerr << "idx " << i << ": not a correct" << field_size
+                    << "-byte value\n";
+          return;
+        }
+      } else {
+        rule64 = current.value_int();
+      }
       for (int j = 0; j < field_size; j++) {
         rule->back().push_back(rule64 & 0xFFULL);
+        DLOG(INFO) << "Pushed " << std::hex << (rule64 & 0xFFULL) << " to rule."
+                   << std::endl;
         rule64 >>= 8;
       }
     }
@@ -289,7 +401,7 @@ CommandResponse ExactMatch::CommandDelete(
   }
 
   ExactMatchRuleFields rule;
-  RuleFieldsFromPb(arg.fields(), &rule);
+  RuleFieldsFromPb(arg.fields(), &rule, FIELD_TYPE);
 
   Error ret = table_.DeleteRule(rule);
   if (ret.first) {
diff --git a/core/modules/exact_match.h b/core/modules/exact_match.h
index f7560e97..99cb2654 100644
--- a/core/modules/exact_match.h
+++ b/core/modules/exact_match.h
@@ -37,13 +37,36 @@
 #include "../module.h"
 #include "../pb/module_msg.pb.h"
 #include "../utils/exact_match_table.h"
+#include "../utils/format.h"
 
-using google::protobuf::RepeatedPtrField;
+using bess::utils::Error;
 using bess::utils::ExactMatchField;
 using bess::utils::ExactMatchKey;
 using bess::utils::ExactMatchRuleFields;
 using bess::utils::ExactMatchTable;
-using bess::utils::Error;
+using google::protobuf::RepeatedPtrField;
+
+typedef enum { FIELD_TYPE = 0, VALUE_TYPE } Type;
+
+class ExactMatch;
+class Value {
+  friend class ExactMatch;
+
+ public:
+  Value(gate_idx_t g = 0) : gate(g) {}
+  Value(const Value &v) : gate(v.gate) {}
+  gate_idx_t gate;
+};
+
+class ValueTuple : public Value {
+  friend class ExactMatch;
+
+ public:
+  ValueTuple() : Value(), action() {}
+  ValueTuple(Value v) : Value(v), action() {}
+
+  ExactMatchKey action;
+};
 
 class ExactMatch final : public Module {
  public:
@@ -51,7 +74,14 @@ class ExactMatch final : public Module {
 
   static const Commands cmds;
 
-  ExactMatch() : Module(), default_gate_(), table_() {
+  ExactMatch()
+      : Module(),
+        default_gate_(),
+        raw_value_size_(),
+        total_value_size_(),
+        num_values_(),
+        values_(),
+        table_() {
     max_allowed_workers_ = Worker::kMaxWorkers;
   }
 
@@ -72,15 +102,153 @@ class ExactMatch final : public Module {
 
  private:
   CommandResponse AddFieldOne(const bess::pb::Field &field,
-                              const bess::pb::FieldData &mask, int idx);
+                              const bess::pb::FieldData &mask, int idx, Type t);
   void RuleFieldsFromPb(const RepeatedPtrField<bess::pb::FieldData> &fields,
-                        bess::utils::ExactMatchRuleFields *rule);
+                        bess::utils::ExactMatchRuleFields *rule, Type type);
   Error AddRule(const bess::pb::ExactMatchCommandAddArg &arg);
+  size_t num_values() const { return num_values_; }
+  ExactMatchField *getVals() { return values_; };
+  Error gather_value(const ExactMatchRuleFields &fields, ExactMatchKey *key) {
+    if (fields.size() != num_values_) {
+      return std::make_pair(
+          EINVAL, bess::utils::Format("rule should have %zu fields (has %zu)",
+                                      num_values_, fields.size()));
+    }
+
+    *key = {};
+
+    for (size_t i = 0; i < fields.size(); i++) {
+      int field_size = values_[i].size;
+      int field_pos = values_[i].pos;
+
+      const std::vector<uint8_t> &f_obj = fields[i];
+
+      if (static_cast<size_t>(field_size) != f_obj.size()) {
+        return std::make_pair(
+            EINVAL,
+            bess::utils::Format("rule field %zu should have size %d (has %zu)",
+                                i, field_size, f_obj.size()));
+      }
+
+      memcpy(reinterpret_cast<uint8_t *>(key) + field_pos, f_obj.data(),
+             field_size);
+    }
+
+    return std::make_pair(0, bess::utils::Format("Success"));
+  }
+  // Helper for public AddField functions.
+  // DoAddValue inserts `field` as the `idx`th field for this table.
+  // If `mt_attr_name` is set, the `offset` field of `field` will be ignored and
+  // the inserted field will use the offset of `mt_attr_name` as reported by the
+  // module `m`.
+  // Returns 0 on success, non-zero errno on failure.
+  Error DoAddValue(const ExactMatchField &value,
+                   const std::string &mt_attr_name, int idx,
+                   Module *m = nullptr) {
+    if (idx >= MAX_FIELDS) {
+      return std::make_pair(
+          EINVAL,
+          bess::utils::Format("idx %d is not in [0,%d)", idx, MAX_FIELDS));
+    }
+    ExactMatchField *v = &values_[idx];
+    v->size = value.size;
+    if (v->size < 1 || v->size > MAX_FIELD_SIZE) {
+      return std::make_pair(
+          EINVAL, bess::utils::Format("idx %d: 'size' must be in [1,%d]", idx,
+                                      MAX_FIELD_SIZE));
+    }
+
+    if (mt_attr_name.length() > 0) {
+      v->attr_id = m->AddMetadataAttr(
+          mt_attr_name, v->size, bess::metadata::Attribute::AccessMode::kWrite);
+      if (v->attr_id < 0) {
+        return std::make_pair(
+            -v->attr_id,
+            bess::utils::Format("idx %d: add_metadata_attr() failed", idx));
+      }
+    } else {
+      v->attr_id = -1;
+      v->offset = value.offset;
+      if (v->offset < 0 || v->offset > 1024) {
+        return std::make_pair(
+            EINVAL, bess::utils::Format("idx %d: invalid 'offset'", idx));
+      }
+    }
+
+    int force_be = (v->attr_id < 0);
+
+    if (value.mask == 0) {
+      /* by default all bits are considered */
+      v->mask = bess::utils::SetBitsHigh<uint64_t>(v->size * 8);
+    } else {
+      if (!bess::utils::uint64_to_bin(&v->mask, value.mask, v->size,
+                                      bess::utils::is_be_system() | force_be)) {
+        return std::make_pair(
+            EINVAL, bess::utils::Format("idx %d: not a valid %d-byte mask", idx,
+                                        v->size));
+      }
+    }
+
+    if (v->mask == 0) {
+      return std::make_pair(EINVAL,
+                            bess::utils::Format("idx %d: empty mask", idx));
+    }
+
+    num_values_++;
+
+    v->pos = raw_value_size_;
+    raw_value_size_ += v->size;
+    total_value_size_ = align_ceil(raw_value_size_, sizeof(uint64_t));
+    return std::make_pair(0, bess::utils::Format("Success"));
+  }
+  // Returns the ith value.
+  const ExactMatchField &get_value(size_t i) const { return values_[i]; }
+  // Set the `idx`th field of this table to one at offset `offset` bytes into a
+  // buffer with length `size` and mask `mask`.
+  // Returns 0 on success, non-zero errno on failure.
+  Error AddValue(int offset, int size, uint64_t mask, int idx) {
+    ExactMatchField v = {
+        .mask = mask, .attr_id = 0, .offset = offset, .pos = 0, .size = size};
+    return DoAddValue(v, "", idx, nullptr);
+  }
+
+  // Set the `idx`th field of this table to one at the offset of the
+  // `mt_attr_name` metadata field as seen by module `m`, with length `size` and
+  // mask `mask`.
+  // Returns 0 on success, non-zero errno on failure.
+  Error AddValue(Module *m, const std::string &mt_attr_name, int size,
+                 uint64_t mask, int idx) {
+    ExactMatchField v = {
+        .mask = mask, .attr_id = 0, .offset = 0, .pos = 0, .size = size};
+    return DoAddValue(v, mt_attr_name, idx, m);
+  }
+  Error CreateValue(ExactMatchKey &v, const ExactMatchRuleFields &values) {
+    Error err;
+
+    if (values.size() == 0) {
+      return std::make_pair(EINVAL, "rule has no values");
+    }
+
+    if ((err = gather_value(values, &v)).first != 0) {
+      return err;
+    }
+
+    return std::make_pair(0, bess::utils::Format("Success"));
+  }
+  void setValues(bess::Packet *pkt, ExactMatchKey &action);
 
   gate_idx_t default_gate_;
   bool empty_masks_;  // mainly for GetInitialArg
 
-  ExactMatchTable<gate_idx_t> table_;
+  // unaligend key size, used as an accumulator for calls to AddField()
+  size_t raw_value_size_;
+
+  // aligned total key size
+  size_t total_value_size_;
+
+  size_t num_values_;
+  ExactMatchField values_[MAX_FIELDS];
+  ExactMatchTable<ValueTuple> table_;
 };
 
 #endif  // BESS_MODULES_EXACTMATCH_H_
diff --git a/core/modules/wildcard_match.cc b/core/modules/wildcard_match.cc
index 1b7bfeb6..ec639a7b 100644
--- a/core/modules/wildcard_match.cc
+++ b/core/modules/wildcard_match.cc
@@ -37,6 +37,7 @@
 #include "../utils/format.h"
 
 using bess::metadata::Attribute;
+enum { FieldType = 0, ValueType };
 
 // dst = src & mask. len must be a multiple of sizeof(uint64_t)
 static inline void mask(wm_hkey_t *dst, const wm_hkey_t &src,
@@ -63,17 +64,17 @@ const Commands WildcardMatch::cmds = {
     {"set_runtime_config", "WildcardMatchConfig",
      MODULE_CMD_FUNC(&WildcardMatch::SetRuntimeConfig), Command::THREAD_UNSAFE},
     {"add", "WildcardMatchCommandAddArg",
-     MODULE_CMD_FUNC(&WildcardMatch::CommandAdd), Command::THREAD_UNSAFE},
+     MODULE_CMD_FUNC(&WildcardMatch::CommandAdd), Command::THREAD_SAFE},
     {"delete", "WildcardMatchCommandDeleteArg",
-     MODULE_CMD_FUNC(&WildcardMatch::CommandDelete), Command::THREAD_UNSAFE},
+     MODULE_CMD_FUNC(&WildcardMatch::CommandDelete), Command::THREAD_SAFE},
     {"clear", "EmptyArg", MODULE_CMD_FUNC(&WildcardMatch::CommandClear),
-     Command::THREAD_UNSAFE},
+     Command::THREAD_SAFE},
     {"set_default_gate", "WildcardMatchCommandSetDefaultGateArg",
      MODULE_CMD_FUNC(&WildcardMatch::CommandSetDefaultGate),
      Command::THREAD_SAFE}};
 
 CommandResponse WildcardMatch::AddFieldOne(const bess::pb::Field &field,
-                                           struct WmField *f) {
+                                           struct WmField *f, uint8_t type) {
   f->size = field.num_bytes();
 
   if (f->size < 1 || f->size > MAX_FIELD_SIZE) {
@@ -88,7 +89,10 @@ CommandResponse WildcardMatch::AddFieldOne(const bess::pb::Field &field,
     }
   } else if (field.position_case() == bess::pb::Field::kAttrName) {
     const char *attr = field.attr_name().c_str();
-    f->attr_id = AddMetadataAttr(attr, f->size, Attribute::AccessMode::kRead);
+    f->attr_id =
+        (type == FieldType)
+            ? AddMetadataAttr(attr, f->size, Attribute::AccessMode::kRead)
+            : AddMetadataAttr(attr, f->size, Attribute::AccessMode::kWrite);
     if (f->attr_id < 0) {
       return CommandFailure(-f->attr_id, "add_metadata_attr() failed");
     }
@@ -119,7 +123,7 @@ CommandResponse WildcardMatch::Init(const bess::pb::WildcardMatchArg &arg) {
 
     f.pos = size_acc;
 
-    err = AddFieldOne(field, &f);
+    err = AddFieldOne(field, &f, FieldType);
     if (err.error().code() != 0) {
       return err;
     }
@@ -130,14 +134,34 @@ CommandResponse WildcardMatch::Init(const bess::pb::WildcardMatchArg &arg) {
   default_gate_ = DROP_GATE;
   total_key_size_ = align_ceil(size_acc, sizeof(uint64_t));
 
+  // reset size_acc
+  size_acc = 0;
+  for (int i = 0; i < arg.values_size(); i++) {
+    const auto &value = arg.values(i);
+    CommandResponse err;
+    values_.emplace_back();
+    struct WmField &v = values_.back();
+
+    v.pos = size_acc;
+
+    err = AddFieldOne(value, &v, ValueType);
+    if (err.error().code() != 0) {
+      return err;
+    }
+
+    size_acc += v.size;
+  }
+
+  total_value_size_ = align_ceil(size_acc, sizeof(uint64_t));
+
   return CommandSuccess();
 }
 
 inline gate_idx_t WildcardMatch::LookupEntry(const wm_hkey_t &key,
-                                             gate_idx_t def_gate) {
+                                             gate_idx_t def_gate,
+                                             bess::Packet *pkt) {
   struct WmData result = {
-      .priority = INT_MIN, .ogate = def_gate,
-  };
+      .priority = INT_MIN, .ogate = def_gate, .keyv = {{0}}};
 
   for (auto &tuple : tuples_) {
     const auto &ht = tuple.ht;
@@ -153,6 +177,58 @@ inline gate_idx_t WildcardMatch::LookupEntry(const wm_hkey_t &key,
     }
   }
 
+  /* if lookup was successful, then set values (if possible) */
+  if (result.ogate != default_gate_) {
+    size_t num_values_ = values_.size();
+    for (size_t i = 0; i < num_values_; i++) {
+      int value_size = values_[i].size;
+      int value_pos = values_[i].pos;
+      int value_off = values_[i].offset;
+      int value_attr_id = values_[i].attr_id;
+      uint8_t *data = pkt->head_data<uint8_t *>() + value_off;
+
+      DLOG(INFO) << "off: " << (int)value_off << ", sz: " << value_size
+                 << std::endl;
+      if (value_attr_id < 0) { /* if it is offset-based */
+        memcpy(data, reinterpret_cast<uint8_t *>(&result.keyv) + value_pos,
+               value_size);
+      } else { /* if it is attribute-based */
+        typedef struct {
+          uint8_t bytes[bess::metadata::kMetadataAttrMaxSize];
+        } value_t;
+        uint8_t *buf = (uint8_t *)&result.keyv + value_pos;
+
+        DLOG(INFO) << "Setting value " << std::hex
+                   << *(reinterpret_cast<uint64_t *>(buf))
+                   << " for attr_id: " << value_attr_id
+                   << " of size: " << value_size
+                   << " at value_pos: " << value_pos << std::endl;
+
+        switch (value_size) {
+          case 1:
+            set_attr<uint8_t>(this, value_attr_id, pkt, *((uint8_t *)buf));
+            break;
+          case 2:
+            set_attr<uint16_t>(this, value_attr_id, pkt,
+                               *((uint16_t *)((uint8_t *)buf)));
+            break;
+          case 4:
+            set_attr<uint32_t>(this, value_attr_id, pkt,
+                               *((uint32_t *)((uint8_t *)buf)));
+            break;
+          case 8:
+            set_attr<uint64_t>(this, value_attr_id, pkt,
+                               *((uint64_t *)((uint8_t *)buf)));
+            break;
+          default: {
+            void *mt_ptr =
+                _ptr_attr_with_offset<value_t>(attr_offset(value_attr_id), pkt);
+            bess::utils::CopySmall(mt_ptr, buf, value_size);
+          } break;
+        }
+      }
+    }
+  }
   return result.ogate;
 }
 
@@ -198,7 +274,7 @@ void WildcardMatch::ProcessBatch(Context *ctx, bess::PacketBatch *batch) {
 
   for (int i = 0; i < cnt; i++) {
     bess::Packet *pkt = batch->pkts()[i];
-    EmitPacket(ctx, pkt, LookupEntry(keys[i], default_gate));
+    EmitPacket(ctx, pkt, LookupEntry(keys[i], default_gate, pkt));
   }
 }
 
@@ -275,6 +351,41 @@ CommandResponse WildcardMatch::ExtractKeyMask(const T &arg, wm_hkey_t *key,
   return CommandSuccess();
 }
 
+template <typename T>
+CommandResponse WildcardMatch::ExtractValue(const T &arg, wm_hkey_t *keyv) {
+  if ((size_t)arg.valuesv_size() != values_.size()) {
+    return CommandFailure(EINVAL, "must specify %zu values", values_.size());
+  }
+
+  memset(keyv, 0, sizeof(*keyv));
+
+  for (size_t i = 0; i < values_.size(); i++) {
+    int value_size = values_[i].size;
+    int value_pos = values_[i].pos;
+
+    uint64_t v = 0;
+
+    bess::pb::FieldData valuedata = arg.valuesv(i);
+    if (valuedata.encoding_case() == bess::pb::FieldData::kValueInt) {
+      if (!bess::utils::uint64_to_bin(&v, valuedata.value_int(), value_size,
+                                      false)) {
+        return CommandFailure(EINVAL, "idx %zu: not a correct %d-byte value", i,
+                              value_size);
+      }
+    } else if (valuedata.encoding_case() == bess::pb::FieldData::kValueBin) {
+      bess::utils::Copy(reinterpret_cast<uint8_t *>(&v),
+                        valuedata.value_bin().c_str(),
+                        valuedata.value_bin().size());
+    }
+
+    // Use memcpy, not utils::Copy, to workaround the false positive warning
+    // in g++-8
+    memcpy(reinterpret_cast<uint8_t *>(keyv) + value_pos, &v, value_size);
+  }
+
+  return CommandSuccess();
+}
+
 int WildcardMatch::FindTuple(wm_hkey_t *mask) {
   int i = 0;
 
@@ -299,11 +410,11 @@ int WildcardMatch::AddTuple(wm_hkey_t *mask) {
   return int(tuples_.size() - 1);
 }
 
-int WildcardMatch::DelEntry(int idx, wm_hkey_t *key) {
+bool WildcardMatch::DelEntry(int idx, wm_hkey_t *key) {
   struct WmTuple &tuple = tuples_[idx];
-  int ret =
+  bool ret =
       tuple.ht.Remove(*key, wm_hash(total_key_size_), wm_eq(total_key_size_));
-  if (ret) {
+  if (!ret) {
     return ret;
   }
 
@@ -311,7 +422,7 @@ int WildcardMatch::DelEntry(int idx, wm_hkey_t *key) {
     tuples_.erase(tuples_.begin() + idx);
   }
 
-  return 0;
+  return true;
 }
 
 CommandResponse WildcardMatch::CommandAdd(
@@ -333,6 +444,11 @@ CommandResponse WildcardMatch::CommandAdd(
     return CommandFailure(EINVAL, "Invalid gate: %hu", gate);
   }
 
+  err = ExtractValue(arg, &data.keyv);
+  if (err.error().code() != 0) {
+    return err;
+  }
+
   data.priority = priority;
   data.ogate = gate;
 
@@ -369,7 +485,7 @@ CommandResponse WildcardMatch::CommandDelete(
   }
 
   int ret = DelEntry(idx, &key);
-  if (ret < 0) {
+  if (!ret) {
     return CommandFailure(-ret, "failed to delete a rule");
   }
 
diff --git a/core/modules/wildcard_match.h b/core/modules/wildcard_match.h
index 5a8d9e81..85deeafc 100644
--- a/core/modules/wildcard_match.h
+++ b/core/modules/wildcard_match.h
@@ -39,8 +39,8 @@
 #include "../pb/module_msg.pb.h"
 #include "../utils/cuckoo_map.h"
 
-using bess::utils::HashResult;
 using bess::utils::CuckooMap;
+using bess::utils::HashResult;
 
 #define MAX_TUPLES 8
 #define MAX_FIELDS 8
@@ -54,11 +54,6 @@ static_assert(MAX_FIELD_SIZE <= sizeof(uint64_t),
 #error this code assumes little endian architecture (x86)
 #endif
 
-struct WmData {
-  int priority;
-  gate_idx_t ogate;
-};
-
 struct WmField {
   int attr_id; /* -1 for offset-based fields */
 
@@ -75,6 +70,12 @@ struct wm_hkey_t {
   uint64_t u64_arr[MAX_FIELDS];
 };
 
+struct WmData {
+  int priority;
+  gate_idx_t ogate;
+  wm_hkey_t keyv;
+};
+
 class wm_eq {
  public:
   explicit wm_eq(size_t len) : len_(len) {}
@@ -135,7 +136,13 @@ class WildcardMatch final : public Module {
   static const Commands cmds;
 
   WildcardMatch()
-      : Module(), default_gate_(), total_key_size_(), fields_(), tuples_() {
+      : Module(),
+        default_gate_(),
+        total_key_size_(),
+        total_value_size_(),
+        fields_(),
+        values_(),
+        tuples_() {
     max_allowed_workers_ = Worker::kMaxWorkers;
   }
 
@@ -161,25 +168,31 @@ class WildcardMatch final : public Module {
     wm_hkey_t mask;
   };
 
-  gate_idx_t LookupEntry(const wm_hkey_t &key, gate_idx_t def_gate);
+  gate_idx_t LookupEntry(const wm_hkey_t &key, gate_idx_t def_gate,
+                         bess::Packet *pkt);
 
-  CommandResponse AddFieldOne(const bess::pb::Field &field, struct WmField *f);
+  CommandResponse AddFieldOne(const bess::pb::Field &field, struct WmField *f,
+                              uint8_t type);
 
   template <typename T>
   CommandResponse ExtractKeyMask(const T &arg, wm_hkey_t *key, wm_hkey_t *mask);
+  template <typename T>
+  CommandResponse ExtractValue(const T &arg, wm_hkey_t *keyv);
 
   int FindTuple(wm_hkey_t *mask);
   int AddTuple(wm_hkey_t *mask);
-  int DelEntry(int idx, wm_hkey_t *key);
+  bool DelEntry(int idx, wm_hkey_t *key);
 
   void Clear();
 
   gate_idx_t default_gate_;
 
-  size_t total_key_size_; /* a multiple of sizeof(uint64_t) */
+  size_t total_key_size_;   /* a multiple of sizeof(uint64_t) */
+  size_t total_value_size_; /* a multiple of sizeof(uint64_t) */
 
   // TODO(melvinw): this can be refactored to use ExactMatchTable
   std::vector<struct WmField> fields_;
+  std::vector<struct WmField> values_;
   std::vector<struct WmTuple> tuples_;
 };
 
-- 
2.17.1

