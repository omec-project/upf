From ab485b4b9f0af85c9488476c5ad5dae95564f32c Mon Sep 17 00:00:00 2001
From: Amar Sri <amarsri28@gmail.com>
Date: Mon, 13 Sep 2021 23:53:43 -0700
Subject: [PATCH] Concurrent hash Support for Wildcard/ExactMatch & Resolving Bug #329

---
 core/modules/exact_match.cc    |  24 ++--
 core/modules/exact_match.h     |   3 +
 core/modules/wildcard_match.cc | 249 +++++++++++++++++++++++++--------
 core/modules/wildcard_match.h  |  30 +++-
 core/utils/cuckoo_map.h        | 137 +++++++++++++++++-
 core/utils/exact_match_table.h |  82 ++++++-----
 6 files changed, 411 insertions(+), 114 deletions(-)

diff --git a/core/modules/exact_match.cc b/core/modules/exact_match.cc
index 1ca0fd4e..bb17f5b8 100644
--- a/core/modules/exact_match.cc
+++ b/core/modules/exact_match.cc
@@ -134,7 +134,7 @@ CommandResponse ExactMatch::Init(const bess::pb::ExactMatchArg &arg) {
   }
 
   default_gate_ = DROP_GATE;
-
+  table_.Init();
   return CommandSuccess();
 }
 
@@ -326,17 +326,15 @@ void ExactMatch::ProcessBatch(Context *ctx, bess::PacketBatch *batch) {
 
   int cnt = batch->cnt();
   Value default_value(default_gate);
-
-  for (int i = 0; i < cnt; i++) {
-    bess::Packet *pkt = batch->pkts()[i];
-    ValueTuple res;
-    res = table_.Find(keys[i], default_value);
-    if (res.gate != default_gate) {
-      /* setting respecive values */
-      setValues(pkt, res.action);
+  ValueTuple *res[cnt];
+  uint64_t hit_mask = table_.Find(keys, res, cnt);
+  for (int j = 0; j < cnt; j++) {
+    if ((hit_mask & ((uint64_t)1ULL << j)) == 0)
+      EmitPacket(ctx, batch->pkts()[j], default_gate);
+    else {
+      setValues(batch->pkts()[j], res[j]->action);
+      EmitPacket(ctx, batch->pkts()[j], res[j]->gate);
     }
-    gate_idx_t g = res.gate;
-    EmitPacket(ctx, pkt, g);
   }
 }
 
@@ -422,4 +420,8 @@ CommandResponse ExactMatch::CommandSetDefaultGate(
   return CommandSuccess();
 }
 
+void ExactMatch::DeInit() {
+    table_.DeInit();
+}
+
 ADD_MODULE(ExactMatch, "em", "Multi-field classifier with an exact match table")
diff --git a/core/modules/exact_match.h b/core/modules/exact_match.h
index 99cb2654..d7e3531e 100644
--- a/core/modules/exact_match.h
+++ b/core/modules/exact_match.h
@@ -90,6 +90,9 @@ class ExactMatch final : public Module {
   std::string GetDesc() const override;
 
   CommandResponse Init(const bess::pb::ExactMatchArg &arg);
+
+  void DeInit() override;
+
   CommandResponse GetInitialArg(const bess::pb::EmptyArg &arg);
   CommandResponse GetRuntimeConfig(const bess::pb::EmptyArg &arg);
   CommandResponse SetRuntimeConfig(const bess::pb::ExactMatchConfig &arg);
diff --git a/core/modules/wildcard_match.cc b/core/modules/wildcard_match.cc
index ec639a7b..51e67c55 100644
--- a/core/modules/wildcard_match.cc
+++ b/core/modules/wildcard_match.cc
@@ -40,13 +40,28 @@ using bess::metadata::Attribute;
 enum { FieldType = 0, ValueType };
 
 // dst = src & mask. len must be a multiple of sizeof(uint64_t)
-static inline void mask(wm_hkey_t *dst, const wm_hkey_t &src,
+static inline void mask(wm_hkey_t &dst, const wm_hkey_t &src,
                         const wm_hkey_t &mask, size_t len) {
   promise(len >= sizeof(uint64_t));
   promise(len <= sizeof(wm_hkey_t));
 
   for (size_t i = 0; i < len / 8; i++) {
-    dst->u64_arr[i] = src.u64_arr[i] & mask.u64_arr[i];
+    dst.u64_arr[i] = src.u64_arr[i] & mask.u64_arr[i];
+  }
+}
+static inline void mask_bulk(const wm_hkey_t *src, void *dst, void **dsptr,
+                             const wm_hkey_t &mask, int keys, size_t len) {
+  promise(len >= sizeof(uint64_t));
+  promise(len <= sizeof(wm_hkey_t));
+  size_t i = 0;
+  wm_hkey_t *dst1 = (wm_hkey_t *)dst;
+  wm_hkey_t **dstptr = (wm_hkey_t **)dsptr;
+
+  for (int j = 0; j < keys; j++) {
+    for (i = 0; i < len / 8; i++) {
+      dst1[j].u64_arr[i] = src[j].u64_arr[i] & mask.u64_arr[i];
+    }
+    dstptr[j] = &dst1[j];
   }
 }
 
@@ -130,10 +145,8 @@ CommandResponse WildcardMatch::Init(const bess::pb::WildcardMatchArg &arg) {
 
     size_acc += f.size;
   }
-
   default_gate_ = DROP_GATE;
   total_key_size_ = align_ceil(size_acc, sizeof(uint64_t));
-
   // reset size_acc
   size_acc = 0;
   for (int i = 0; i < arg.values_size(); i++) {
@@ -162,18 +175,16 @@ inline gate_idx_t WildcardMatch::LookupEntry(const wm_hkey_t &key,
                                              bess::Packet *pkt) {
   struct WmData result = {
       .priority = INT_MIN, .ogate = def_gate, .keyv = {{0}}};
-
   for (auto &tuple : tuples_) {
+    if (tuple.occupied == 0)
+      continue;
     const auto &ht = tuple.ht;
     wm_hkey_t key_masked;
-
-    mask(&key_masked, key, tuple.mask, total_key_size_);
-
-    const auto *entry =
-        ht.Find(key_masked, wm_hash(total_key_size_), wm_eq(total_key_size_));
-
-    if (entry && entry->second.priority >= result.priority) {
-      result = entry->second;
+    mask(key_masked, key, tuple.mask, total_key_size_);
+    WmData *entry = nullptr;
+    ht->find_dpdk(&key_masked, ((void **)&entry));
+    if (entry && entry->priority >= result.priority) {
+      result = *entry;
     }
   }
 
@@ -232,20 +243,115 @@ inline gate_idx_t WildcardMatch::LookupEntry(const wm_hkey_t &key,
   return result.ogate;
 }
 
+inline bool WildcardMatch::LookupBulkEntry(wm_hkey_t *key, gate_idx_t def_gate,
+                                           int packeti, gate_idx_t *Outgate,
+                                           int cnt, bess::PacketBatch *batch) {
+  bess::Packet *pkt = nullptr;
+  struct WmData *result[cnt];
+  uint64_t prev_hitmask = 0;
+  uint64_t hitmask = 0;
+  wm_hkey_t key_masked[cnt];
+  WmData *entry[cnt];
+  wm_hkey_t **key_ptr[cnt];
+
+  for (auto tuple = tuples_.begin(); tuple != tuples_.end(); ++tuple) {
+    if (tuple->occupied == 0)
+      continue;
+    const auto &ht = tuple->ht;
+    mask_bulk(key, key_masked, (void **)key_ptr, tuple->mask, cnt,
+              total_key_size_);
+    int num = ht->lookup_bulk_data((const void **)key_ptr, cnt, &hitmask,
+                                   (void **)entry);
+    if (num == 0)
+      continue;
+
+    for (int init = 0; (init < cnt) && (num); init++) {
+      if ((hitmask & ((uint64_t)1 << init))) {
+        if ((prev_hitmask & ((uint64_t)1 << init)) == 0)
+          result[init] = entry[init];
+        else if ((prev_hitmask & ((uint64_t)1 << init)) &&
+                 (entry[init]->priority >= result[init]->priority)) {
+          result[init] = entry[init];
+        }
+
+        num--;
+      }
+    }
+    prev_hitmask = prev_hitmask | hitmask;
+  }
+
+  for (int init = 0; init < cnt; init++) {
+    /* if lookup was successful, then set values (if possible) */
+    if (prev_hitmask && (prev_hitmask & ((uint64_t)1 << init))) {
+      pkt = batch->pkts()[packeti + init];
+      size_t num_values_ = values_.size();
+      for (size_t i = 0; i < num_values_; i++) {
+        int value_size = values_[i].size;
+        int value_pos = values_[i].pos;
+        int value_off = values_[i].offset;
+        int value_attr_id = values_[i].attr_id;
+        uint8_t *data = pkt->head_data<uint8_t *>() + value_off;
+
+        DLOG(INFO) << "off: " << (int)value_off << ", sz: " << value_size
+                   << std::endl;
+        if (value_attr_id < 0) { /* if it is offset-based */
+          memcpy(data,
+                 reinterpret_cast<uint8_t *>(&result[init]->keyv) + value_pos,
+                 value_size);
+        } else { /* if it is attribute-based */
+          typedef struct {
+            uint8_t bytes[bess::metadata::kMetadataAttrMaxSize];
+          } value_t;
+          uint8_t *buf = (uint8_t *)&result[init]->keyv + value_pos;
+
+          DLOG(INFO) << "Setting value " << std::hex
+                     << *(reinterpret_cast<uint64_t *>(buf))
+                     << " for attr_id: " << value_attr_id
+                     << " of size: " << value_size
+                     << " at value_pos: " << value_pos << std::endl;
+
+          switch (value_size) {
+            case 1:
+              set_attr<uint8_t>(this, value_attr_id, pkt, *((uint8_t *)buf));
+              break;
+            case 2:
+              set_attr<uint16_t>(this, value_attr_id, pkt,
+                                 *((uint16_t *)((uint8_t *)buf)));
+              break;
+            case 4:
+              set_attr<uint32_t>(this, value_attr_id, pkt,
+                                 *((uint32_t *)((uint8_t *)buf)));
+              break;
+            case 8:
+              set_attr<uint64_t>(this, value_attr_id, pkt,
+                                 *((uint64_t *)((uint8_t *)buf)));
+              break;
+            default: {
+              void *mt_ptr = _ptr_attr_with_offset<value_t>(
+                  attr_offset(value_attr_id), pkt);
+              bess::utils::CopySmall(mt_ptr, buf, value_size);
+            } break;
+          }
+        }
+      }
+      Outgate[init] = result[init]->ogate;
+    } else
+      Outgate[init] = def_gate;
+  }
+  return 1;
+}
+
 void WildcardMatch::ProcessBatch(Context *ctx, bess::PacketBatch *batch) {
   gate_idx_t default_gate;
-
   wm_hkey_t keys[bess::PacketBatch::kMaxBurst] __ymm_aligned;
-
   int cnt = batch->cnt();
+  gate_idx_t Outgate[cnt];
 
   // Initialize the padding with zero
   for (int i = 0; i < cnt; i++) {
     keys[i].u64_arr[(total_key_size_ - 1) / 8] = 0;
   }
-
   default_gate = ACCESS_ONCE(default_gate_);
-
   for (const auto &field : fields_) {
     int offset;
     int pos = field.pos;
@@ -272,9 +378,9 @@ void WildcardMatch::ProcessBatch(Context *ctx, bess::PacketBatch *batch) {
     }
   }
 
-  for (int i = 0; i < cnt; i++) {
-    bess::Packet *pkt = batch->pkts()[i];
-    EmitPacket(ctx, pkt, LookupEntry(keys[i], default_gate, pkt));
+  LookupBulkEntry(keys, default_gate, 0, Outgate, cnt, batch);
+  for (int j = 0; j < cnt; j++) {
+    EmitPacket(ctx, batch->pkts()[j], Outgate[j]);
   }
 }
 
@@ -282,7 +388,9 @@ std::string WildcardMatch::GetDesc() const {
   int num_rules = 0;
 
   for (const auto &tuple : tuples_) {
-    num_rules += tuple.ht.Count();
+    if (tuple.occupied == 0)
+      continue;
+    num_rules += tuple.ht->Count();
   }
 
   return bess::utils::Format("%zu fields, %d rules", fields_.size(), num_rules);
@@ -387,54 +495,60 @@ CommandResponse WildcardMatch::ExtractValue(const T &arg, wm_hkey_t *keyv) {
 }
 
 int WildcardMatch::FindTuple(wm_hkey_t *mask) {
-  int i = 0;
-
-  for (const auto &tuple : tuples_) {
-    if (memcmp(&tuple.mask, mask, total_key_size_) == 0) {
+  for (auto i = 0; i < MAX_TUPLES; i++) {
+    if ((tuples_[i].occupied) &&
+        (memcmp(&tuples_[i].mask, mask, total_key_size_) == 0)) {
       return i;
     }
-    i++;
   }
   return -ENOENT;
 }
 
 int WildcardMatch::AddTuple(wm_hkey_t *mask) {
-  if (tuples_.size() >= MAX_TUPLES) {
-    return -ENOSPC;
+  CuckooMap<wm_hkey_t, struct WmData, wm_hash, wm_eq> *temp = nullptr;
+  for (int i = 0; i < MAX_TUPLES; i++) {
+    if (tuples_[i].occupied == 0) {
+      bess::utils::Copy(&tuples_[i].mask, mask, sizeof(*mask));
+      tuples_[i].params.key_len = total_key_size_;
+      temp = new CuckooMap<wm_hkey_t, struct WmData, wm_hash, wm_eq>(
+          0, 0, &tuples_[i].params);
+      if (temp == nullptr)
+        return -ENOSPC;
+      if (temp->hash == 0) {
+        delete temp;
+        return -ENOSPC;
+      }
+      void *temp1 = tuples_[i].ht;
+      tuples_[i].ht = temp;
+      if (temp1)
+        delete (
+            static_cast<CuckooMap<wm_hkey_t, struct WmData, wm_hash, wm_eq> *>(
+                temp1));
+      tuples_[i].occupied = 1;
+      return i;
+    }
   }
-
-  tuples_.emplace_back();
-  struct WmTuple &tuple = tuples_.back();
-  bess::utils::Copy(&tuple.mask, mask, sizeof(*mask));
-
-  return int(tuples_.size() - 1);
+  return -ENOSPC;
 }
 
 bool WildcardMatch::DelEntry(int idx, wm_hkey_t *key) {
-  struct WmTuple &tuple = tuples_[idx];
-  bool ret =
-      tuple.ht.Remove(*key, wm_hash(total_key_size_), wm_eq(total_key_size_));
-  if (!ret) {
-    return ret;
+  int ret = tuples_[idx].ht->Remove(*key, wm_hash(total_key_size_),
+                                    wm_eq(total_key_size_));
+  if (ret >= 0) {
+    return true;
   }
-
-  if (tuple.ht.Count() == 0) {
-    tuples_.erase(tuples_.begin() + idx);
+  if (tuples_[idx].ht->Count() == 0) {
   }
-
-  return true;
+  return false;
 }
 
 CommandResponse WildcardMatch::CommandAdd(
     const bess::pb::WildcardMatchCommandAddArg &arg) {
   gate_idx_t gate = arg.gate();
   int priority = arg.priority();
-
   wm_hkey_t key = {{0}};
   wm_hkey_t mask = {{0}};
-
   struct WmData data;
-
   CommandResponse err = ExtractKeyMask(arg, &key, &mask);
   if (err.error().code() != 0) {
     return err;
@@ -444,14 +558,13 @@ CommandResponse WildcardMatch::CommandAdd(
     return CommandFailure(EINVAL, "Invalid gate: %hu", gate);
   }
 
-  err = ExtractValue(arg, &data.keyv);
+  err = ExtractValue(arg, &(data.keyv));
   if (err.error().code() != 0) {
     return err;
   }
 
   data.priority = priority;
   data.ogate = gate;
-
   int idx = FindTuple(&mask);
   if (idx < 0) {
     idx = AddTuple(&mask);
@@ -459,13 +572,10 @@ CommandResponse WildcardMatch::CommandAdd(
       return CommandFailure(-idx, "failed to add a new wildcard pattern");
     }
   }
-
-  auto *ret = tuples_[idx].ht.Insert(key, data, wm_hash(total_key_size_),
-                                     wm_eq(total_key_size_));
-  if (ret == nullptr) {
+  struct WmData *data_t = new WmData(data);
+  int ret = tuples_[idx].ht->insert_dpdk(&key, data_t);
+  if (ret < 0)
     return CommandFailure(EINVAL, "failed to add a rule");
-  }
-
   return CommandSuccess();
 }
 
@@ -485,7 +595,7 @@ CommandResponse WildcardMatch::CommandDelete(
   }
 
   int ret = DelEntry(idx, &key);
-  if (!ret) {
+  if (ret < 0) {
     return CommandFailure(-ret, "failed to delete a rule");
   }
 
@@ -499,7 +609,10 @@ CommandResponse WildcardMatch::CommandClear(const bess::pb::EmptyArg &) {
 
 void WildcardMatch::Clear() {
   for (auto &tuple : tuples_) {
-    tuple.ht.Clear();
+    if (tuple.occupied) {
+      tuple.occupied = 0;
+      tuple.ht->Clear();
+    }
   }
 }
 
@@ -521,17 +634,26 @@ CommandResponse WildcardMatch::GetInitialArg(const bess::pb::EmptyArg &) {
 // Retrieves a WildcardMatchConfig that would restore this module's
 // runtime configuration.
 CommandResponse WildcardMatch::GetRuntimeConfig(const bess::pb::EmptyArg &) {
+  std::pair<wm_hkey_t, WmData> entry;
   bess::pb::WildcardMatchConfig resp;
   using rule_t = bess::pb::WildcardMatchCommandAddArg;
-
+  const wm_hkey_t *key = 0;
+  WmData *data;
+  uint32_t *next = 0;
   resp.set_default_gate(default_gate_);
 
   // Each tuple provides a single mask, which may have many data-matches.
   for (auto &tuple : tuples_) {
+    if (tuple.occupied == 0)
+      continue;
     wm_hkey_t mask = tuple.mask;
     // Each entry in the hash table has priority, ogate, and the data
     // (one datum per field, under the mask for this field).
-    for (auto &entry : tuple.ht) {
+    //  using rte method
+    while ((tuple.ht->Iterate((const void **)&key, (void **)&data, next)) >=
+           (int)0) {
+      entry.first = *key;
+      entry.second = *data;
       // Create the rule instance
       rule_t *rule = resp.add_rules();
       rule->set_priority(entry.second.priority);
@@ -596,5 +718,14 @@ CommandResponse WildcardMatch::SetRuntimeConfig(
   return CommandSuccess();
 }
 
+void WildcardMatch::DeInit() {
+    for (auto &tuple : tuples_) {
+        if (!tuple.ht)
+            continue;
+        tuple.ht->DeInit();
+        tuple.ht = NULL;
+    }
+}
+
 ADD_MODULE(WildcardMatch, "wm",
            "Multi-field classifier with a wildcard match table")
diff --git a/core/modules/wildcard_match.h b/core/modules/wildcard_match.h
index 85deeafc..0bd85f6b 100644
--- a/core/modules/wildcard_match.h
+++ b/core/modules/wildcard_match.h
@@ -45,6 +45,7 @@ using bess::utils::HashResult;
 #define MAX_TUPLES 8
 #define MAX_FIELDS 8
 #define MAX_FIELD_SIZE 8
+#define BULK_SIZE 32
 static_assert(MAX_FIELD_SIZE <= sizeof(uint64_t),
               "field cannot be larger than 8 bytes");
 
@@ -128,6 +129,12 @@ class wm_hash {
  private:
   size_t len_;
 };
+struct rte_hash_parameters dpdk_params1 {
+  .name = "test2", .entries = 1 << 20, .reserved = 0,
+  .key_len = sizeof(wm_hkey_t), .hash_func = rte_hash_crc,
+  .hash_func_init_val = 0, .socket_id = (int)rte_socket_id(),
+  .extra_flag = RTE_HASH_EXTRA_FLAGS_RW_CONCURRENCY
+};
 
 class WildcardMatch final : public Module {
  public:
@@ -144,10 +151,13 @@ class WildcardMatch final : public Module {
         values_(),
         tuples_() {
     max_allowed_workers_ = Worker::kMaxWorkers;
+    { tuples_.resize(MAX_TUPLES); }
   }
 
   CommandResponse Init(const bess::pb::WildcardMatchArg &arg);
 
+  void DeInit() override;
+
   void ProcessBatch(Context *ctx, bess::PacketBatch *batch) override;
 
   std::string GetDesc() const override;
@@ -164,13 +174,26 @@ class WildcardMatch final : public Module {
 
  private:
   struct WmTuple {
-    CuckooMap<wm_hkey_t, struct WmData, wm_hash, wm_eq> ht;
+    bool occupied;
+    CuckooMap<wm_hkey_t, struct WmData, wm_hash, wm_eq> *ht;
     wm_hkey_t mask;
+    struct rte_hash_parameters params;
+    std::string hash_name;
+    WmTuple() : occupied(0), ht(0) {
+      params = dpdk_params1;
+      std::ostringstream address;
+      address << this;
+      hash_name = "Wild" + address.str();
+      params.name = hash_name.c_str();
+    }
   };
 
   gate_idx_t LookupEntry(const wm_hkey_t &key, gate_idx_t def_gate,
                          bess::Packet *pkt);
 
+  bool LookupBulkEntry(wm_hkey_t *key, gate_idx_t def_gate, int i,
+                       gate_idx_t *Outgate, int cnt, bess::PacketBatch *batch);
+
   CommandResponse AddFieldOne(const bess::pb::Field &field, struct WmField *f,
                               uint8_t type);
 
@@ -182,9 +205,7 @@ class WildcardMatch final : public Module {
   int FindTuple(wm_hkey_t *mask);
   int AddTuple(wm_hkey_t *mask);
   bool DelEntry(int idx, wm_hkey_t *key);
-
   void Clear();
-
   gate_idx_t default_gate_;
 
   size_t total_key_size_;   /* a multiple of sizeof(uint64_t) */
@@ -193,7 +214,8 @@ class WildcardMatch final : public Module {
   // TODO(melvinw): this can be refactored to use ExactMatchTable
   std::vector<struct WmField> fields_;
   std::vector<struct WmField> values_;
-  std::vector<struct WmTuple> tuples_;
+  std::vector<struct WmTuple> tuples_;  //[MAX_TUPLES];
+  std::vector<struct WmData> data_;
 };
 
 #endif  // BESS_MODULES_WILDCARDMATCH_H_
diff --git a/core/utils/cuckoo_map.h b/core/utils/cuckoo_map.h
index c855b93d..9a66864d 100644
--- a/core/utils/cuckoo_map.h
+++ b/core/utils/cuckoo_map.h
@@ -50,6 +50,8 @@
 
 #include "../debug.h"
 #include "common.h"
+#include <iostream>
+#include <rte_hash.h>
 
 namespace bess {
 namespace utils {
@@ -74,7 +76,13 @@ typedef uint32_t EntryIndex;
 template <typename K, typename V, typename H = std::hash<K>,
           typename E = std::equal_to<K>>
 class CuckooMap {
+ private:
+  bool IsDpdk = false;
+  uint32_t key_len = 0;
+  rte_hash_parameters rt;
+
  public:
+  struct rte_hash* hash = nullptr;
   typedef std::pair<K, V> Entry;
 
   class iterator {
@@ -149,20 +157,29 @@ class CuckooMap {
   };
 
   CuckooMap(size_t reserve_buckets = kInitNumBucket,
-            size_t reserve_entries = kInitNumEntries)
+            size_t reserve_entries = kInitNumEntries, void* dpdk_params = 0)
       : bucket_mask_(reserve_buckets - 1),
         num_entries_(0),
         buckets_(reserve_buckets),
         entries_(reserve_entries),
         free_entry_indices_() {
-    // the number of buckets must be a power of 2
-    CHECK_EQ(align_ceil_pow2(reserve_buckets), reserve_buckets);
+    if (dpdk_params) {
+      if (hash == NULL) {
+        rt = *((rte_hash_parameters*)dpdk_params);
+        hash = rte_hash_create(&rt);
+        if (hash == NULL)
+          return;
+      }
+      IsDpdk = true;
+    } else {
+      // the number of buckets must be a power of 2
+      CHECK_EQ(align_ceil_pow2(reserve_buckets), reserve_buckets);
 
-    for (int i = reserve_entries - 1; i >= 0; --i) {
-      free_entry_indices_.push(i);
+      for (int i = reserve_entries - 1; i >= 0; --i) {
+        free_entry_indices_.push(i);
+      }
     }
   }
-
   // Not allowing copying for now
   CuckooMap(CuckooMap&) = delete;
   CuckooMap& operator=(CuckooMap&) = delete;
@@ -176,6 +193,16 @@ class CuckooMap {
 
   template <typename... Args>
   Entry* DoEmplace(const K& key, const H& hasher, const E& eq, Args&&... args) {
+    if (IsDpdk) {
+      Entry* entry1 = new Entry;
+      new (&entry1->second) V(std::forward<Args>(args)...);
+      int ret1 = rte_hash_add_key_data(hash, &key, (void*)(&entry1->second));
+      if (ret1 < 0)
+        return nullptr;
+      entry1->first = key;
+      return entry1;
+    }
+
     Entry* entry;
     HashResult primary = Hash(key, hasher);
 
@@ -220,6 +247,50 @@ class CuckooMap {
     return DoEmplace(key, hasher, eq, std::move(value));
   }
 
+  int insert_dpdk(const void* key, void* data = 0, hash_sig_t sig = 0) {
+    if (IsDpdk) {
+      if (data && !sig)
+        return rte_hash_add_key_data(hash, key, data);
+      if (data && sig)
+        return rte_hash_add_key_with_hash_data(hash, key, sig, data);
+      if (!data && !sig)
+        return rte_hash_add_key(hash, key);
+    }
+    return -1;
+  }
+
+  int find_dpdk(const void* key, void** data = 0,
+                hash_sig_t sig = 0) /*(const K& key, void* out) */
+  {
+    if (IsDpdk) {
+      if (data && !sig)
+        return rte_hash_lookup_data(hash, key, data);
+      if (data && sig)
+        return rte_hash_lookup_with_hash_data(hash, key, sig, data);
+      if (!data && !sig)
+        return rte_hash_lookup(hash, key);
+      if (!data && sig)
+        return rte_hash_lookup_with_hash(hash, key, sig);
+    }
+    return -1;
+  }
+
+  int find_dpdk(const void* key, void** data = 0,
+                hash_sig_t sig = 0) const /*(const K& key, void* out) */
+  {
+    if (IsDpdk) {
+      if (data && !sig)
+        return rte_hash_lookup_data(hash, key, data);
+      if (data && sig)
+        return rte_hash_lookup_with_hash_data(hash, key, sig, data);
+      if (!data && !sig)
+        return rte_hash_lookup(hash, key);
+      if (!data && sig)
+        return rte_hash_lookup_with_hash(hash, key, sig);
+    }
+    return -1;
+  }
+
   // Emplace/update-in-place a key value pair
   // On success returns a pointer to the inserted entry, nullptr otherwise.
   // NOTE: when Emplace() returns nullptr, the constructor of `V` may not be
@@ -242,6 +313,16 @@ class CuckooMap {
   // const version of Find()
   const Entry* Find(const K& key, const H& hasher = H(),
                     const E& eq = E()) const {
+    if (IsDpdk) {
+      Entry* ans = new Entry;
+      V* data;
+      int ret = rte_hash_lookup_data(hash, &key, (void**)&data);
+      if (ret < 0)
+        return NULL;
+      ans->first = key;
+      ans->second = *data;
+      return ans;
+    }
     EntryIndex idx = FindWithHash(Hash(key, hasher), key, eq);
     if (idx == kInvalidEntryIdx) {
       return nullptr;
@@ -255,6 +336,13 @@ class CuckooMap {
   // Remove the stored entry by the key
   // Return false if not exist.
   bool Remove(const K& key, const H& hasher = H(), const E& eq = E()) {
+    if (IsDpdk) {
+      int ret = rte_hash_del_key(hash, &key);
+      if (ret < 0)
+        return false;
+      else
+        return true;
+    }
     HashResult pri = Hash(key, hasher);
     if (RemoveFromBucket(pri, pri & bucket_mask_, key, eq)) {
       return true;
@@ -267,6 +355,12 @@ class CuckooMap {
   }
 
   void Clear() {
+    if (IsDpdk) {
+      if (hash) {
+        rte_hash_reset(hash);
+      }
+      return;
+    }
     buckets_.clear();
     entries_.clear();
 
@@ -286,7 +380,36 @@ class CuckooMap {
   }
 
   // Return the number of stored entries
-  size_t Count() const { return num_entries_; }
+  size_t Count() const {
+    if (IsDpdk)
+      return rte_hash_count(hash);
+    else
+      return num_entries_;
+  }
+
+  void DeInit() {
+    if (IsDpdk) {
+      if (hash) {
+        rte_hash_free(hash);
+        hash = nullptr;
+      }
+      return;
+    }
+  }
+
+  // bulk data look up bess func
+  int32_t lookup_bulk_data(const void** keys, uint32_t num_keys,
+                           uint64_t* hit_mask, void* data[]) {
+    if (IsDpdk)
+      return rte_hash_lookup_bulk_data(hash, keys, num_keys, hit_mask, data);
+    return -1;
+  }
+  // iterate for dpdk hash
+  int32_t Iterate(const void** key, void** data, uint32_t* next) {
+    if (IsDpdk)
+      return rte_hash_iterate(hash, key, data, next);
+    return -1;
+  }
 
  protected:
   // Tunable macros
diff --git a/core/utils/exact_match_table.h b/core/utils/exact_match_table.h
index 7c0cfda4..ac87e090 100644
--- a/core/utils/exact_match_table.h
+++ b/core/utils/exact_match_table.h
@@ -155,15 +155,17 @@ typedef std::vector<std::vector<uint8_t>> ExactMatchRuleFields;
 template <typename T>
 class ExactMatchTable {
  public:
+  struct rte_hash_parameters dpdk_params {
+    .name = "test1", .entries = 1 << 20, .reserved = 0,
+    .key_len = sizeof(ExactMatchKey), .hash_func = rte_hash_crc,
+    .hash_func_init_val = 0, .socket_id = (int)rte_socket_id(),
+    .extra_flag = RTE_HASH_EXTRA_FLAGS_RW_CONCURRENCY
+  };
+
   using EmTable =
       CuckooMap<ExactMatchKey, T, ExactMatchKeyHash, ExactMatchKeyEq>;
-
   ExactMatchTable()
-      : raw_key_size_(),
-        total_key_size_(),
-        num_fields_(),
-        fields_(),
-        table_() {}
+      : raw_key_size_(), total_key_size_(), num_fields_(), fields_() {}
 
   // Add a new rule.
   //
@@ -183,10 +185,9 @@ class ExactMatchTable {
     if ((err = gather_key(fields, &key)).first != 0) {
       return err;
     }
-
-    table_.Insert(key, val, ExactMatchKeyHash(total_key_size_),
-                  ExactMatchKeyEq(total_key_size_));
-
+    const void *Key_t = (const void *)&key;
+    T *val_t = new T(val);
+    table_->insert_dpdk(Key_t, val_t);
     return MakeError(0);
   }
 
@@ -207,8 +208,8 @@ class ExactMatchTable {
       return err;
     }
 
-    bool ret = table_.Remove(key, ExactMatchKeyHash(total_key_size_),
-                             ExactMatchKeyEq(total_key_size_));
+    bool ret = table_->Remove(key, ExactMatchKeyHash(total_key_size_),
+                              ExactMatchKeyEq(total_key_size_));
     if (!ret) {
       return MakeError(ENOENT, "rule doesn't exist");
     }
@@ -217,9 +218,11 @@ class ExactMatchTable {
   }
 
   // Remove all rules from the table.
-  void ClearRules() { table_.Clear(); }
+  void ClearRules() { table_->Clear(); }
 
-  size_t Size() const { return table_.Count(); }
+  void DeInit() { table_->DeInit(); }
+
+  size_t Size() const { return table_->Count(); }
 
   // Extract an ExactMatchKey from `buf` based on the fields that have been
   // added to this table.
@@ -272,23 +275,27 @@ class ExactMatchTable {
   // Returns the value if `key` matches a rule, otherwise `default_value`.
   T Find(const ExactMatchKey &key, const T &default_value) const {
     const auto &table = table_;
-    const auto *entry = table.Find(key, ExactMatchKeyHash(total_key_size_),
-                                   ExactMatchKeyEq(total_key_size_));
-    return entry ? entry->second : default_value;
+    void *data = nullptr;
+    table->find_dpdk(&key, &data);
+    if (data) {
+      T data_t = *((T *)data);
+      return data_t;
+    } else
+      return default_value;
   }
 
   // Find entries for `n` `keys` in the table and store their values in in
   // `vals`.  Keys without entries will have their corresponding entires in
   // `vals` set to `default_value`.
-  void Find(const ExactMatchKey *keys, T *vals, size_t n,
-            T default_value) const {
+  uint64_t Find(ExactMatchKey *keys, T **vals, int n) {
     const auto &table = table_;
-    for (size_t i = 0; i < n; i++) {
-      const auto *entry =
-          table.Find(keys[i], ExactMatchKeyHash(total_key_size_),
-                     ExactMatchKeyEq(total_key_size_));
-      vals[i] = entry ? entry->second : default_value;
-    }
+    uint64_t hit_mask = 0;
+    ExactMatchKey *key_ptr[n];
+    for (int h = 0; h < n; h++)
+      key_ptr[h] = &keys[h];
+    table->lookup_bulk_data((const void **)&key_ptr, n, &hit_mask,
+                            (void **)vals);
+    return hit_mask;
   }
 
   uint32_t total_key_size() const { return total_key_size_; }
@@ -318,9 +325,20 @@ class ExactMatchTable {
   // Returns the ith field.
   const ExactMatchField &get_field(size_t i) const { return fields_[i]; }
 
-  typename EmTable::iterator begin() { return table_.begin(); }
+  typename EmTable::iterator begin() { return table_->begin(); }
 
-  typename EmTable::iterator end() { return table_.end(); }
+  typename EmTable::iterator end() { return table_->end(); }
+
+  void Init() {
+    std::ostringstream address;
+    address << &table_;
+    std::string name = "Exactmatch" + address.str();
+    dpdk_params.name = name.c_str();
+    dpdk_params.key_len = total_key_size();
+    table_.reset(
+        new CuckooMap<ExactMatchKey, T, ExactMatchKeyHash, ExactMatchKeyEq>(
+            0, 0, &dpdk_params));
+  }
 
  private:
   Error MakeError(int code, const std::string &msg = "") {
@@ -438,23 +456,21 @@ class ExactMatchTable {
     f->pos = raw_key_size_;
     raw_key_size_ += f->size;
     total_key_size_ = align_ceil(raw_key_size_, sizeof(uint64_t));
-
     return MakeError(0);
   }
 
   // unaligend key size, used as an accumulator for calls to AddField()
   size_t raw_key_size_;
-
   // aligned total key size
   size_t total_key_size_;
-
   size_t num_fields_;
   ExactMatchField fields_[MAX_FIELDS];
-
-  EmTable table_;
+  std::unique_ptr<
+      CuckooMap<ExactMatchKey, T, ExactMatchKeyHash, ExactMatchKeyEq>>
+      table_;
 };
 
-}  // namespace bess
 }  // namespace utils
+}  // namespace bess
 
 #endif  // BESS_UTILS_EXACT_MATCH_TABLE_H_
-- 
2.17.1

