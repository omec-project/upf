From 65a2967d617572e046b0ede11e679ea4ad5ba995 Mon Sep 17 00:00:00 2001
From: Tim Rozet <trozet@redhat.com>
Date: Mon, 28 Oct 2019 11:28:12 -0400
Subject: [PATCH 01/11] Updates DPDK to 19.08

Also sets RSS HW offload flags based on device info and RX queues
configured rather than assuming all flags are supported. This fixes an
issue with setting invalid flags on XL710 NICs.

Other build changes include:

 - "nhm" is deprecated for RTE_MACHINE, switch to use native
 - Removal of deps config file to overwrite linuxapp
 - common_linux config file is used by target x86_64-native-linuxapp-gcc
   so now just directly edit that file

Closes #921

Signed-off-by: Tim Rozet <trozet@redhat.com>
---
 build.py                        |  39 +++++------
 core/Makefile                   |  12 ++--
 core/drivers/pmd.cc             | 112 ++++++++++++++++++++------------
 core/packet_pool.cc             |  11 ++--
 core/utils/checksum_test.cc     |  16 ++---
 deps/dpdk-17.11_common_linuxapp |  58 -----------------
 6 files changed, 108 insertions(+), 140 deletions(-)
 delete mode 100644 deps/dpdk-17.11_common_linuxapp

diff --git a/build.py b/build.py
index ad8ad61eb..96459d82f 100755
--- a/build.py
+++ b/build.py
@@ -89,16 +89,14 @@ def cmd(cmd, quiet=False, shell=False):
 DEPS_DIR = '%s/deps' % BESS_DIR
 
 DPDK_URL = 'https://fast.dpdk.org/rel'
-DPDK_VER = 'dpdk-17.11'
+DPDK_VER = 'dpdk-19.08'
 DPDK_TARGET = 'x86_64-native-linuxapp-gcc'
 
 kernel_release = cmd('uname -r', quiet=True).strip()
 
 DPDK_DIR = '%s/%s' % (DEPS_DIR, DPDK_VER)
 DPDK_CFLAGS = '"-g -w -fPIC"'
-DPDK_ORIG_CONFIG = '%s/config/common_linuxapp' % DPDK_DIR
-DPDK_BASE_CONFIG = '%s/%s_common_linuxapp' % (DEPS_DIR, DPDK_VER)
-DPDK_FINAL_CONFIG = '%s/%s_common_linuxapp_final' % (DEPS_DIR, DPDK_VER)
+DPDK_ORIG_CONFIG = '%s/config/common_linux' % DPDK_DIR
 
 extra_libs = set()
 cxx_flags = []
@@ -214,10 +212,10 @@ def check_kernel_headers():
     # If kernel header is not available, do not attempt to build
     # any components that require kernel.
     if not is_kernel_header_installed():
-        set_config(DPDK_FINAL_CONFIG, 'CONFIG_RTE_EAL_IGB_UIO', 'n')
-        set_config(DPDK_FINAL_CONFIG, 'CONFIG_RTE_KNI_KMOD', 'n')
-        set_config(DPDK_FINAL_CONFIG, 'CONFIG_RTE_LIBRTE_KNI', 'n')
-        set_config(DPDK_FINAL_CONFIG, 'CONFIG_RTE_LIBRTE_PMD_KNI', 'n')
+        set_config(DPDK_ORIG_CONFIG, 'CONFIG_RTE_EAL_IGB_UIO', 'n')
+        set_config(DPDK_ORIG_CONFIG, 'CONFIG_RTE_KNI_KMOD', 'n')
+        set_config(DPDK_ORIG_CONFIG, 'CONFIG_RTE_LIBRTE_KNI', 'n')
+        set_config(DPDK_ORIG_CONFIG, 'CONFIG_RTE_LIBRTE_PMD_KNI', 'n')
 
 
 def check_bnx():
@@ -225,7 +223,7 @@ def check_bnx():
         extra_libs.add('z')
     else:
         print(' - "zlib1g-dev" is not available. Disabling BNX2X PMD...')
-        set_config(DPDK_FINAL_CONFIG, 'CONFIG_RTE_LIBRTE_BNX2X_PMD', 'n')
+        set_config(DPDK_ORIG_CONFIG, 'CONFIG_RTE_LIBRTE_BNX2X_PMD', 'n')
 
 
 def check_mlx():
@@ -241,8 +239,8 @@ def check_mlx():
             print('   NOTE: "libibverbs-dev" does exist, but it does not '
                   'work with MLX PMDs. Instead download OFED from '
                   'http://www.melloanox.com')
-        set_config(DPDK_FINAL_CONFIG, 'CONFIG_RTE_LIBRTE_MLX4_PMD', 'n')
-        set_config(DPDK_FINAL_CONFIG, 'CONFIG_RTE_LIBRTE_MLX5_PMD', 'n')
+        set_config(DPDK_ORIG_CONFIG, 'CONFIG_RTE_LIBRTE_MLX4_PMD', 'n')
+        set_config(DPDK_ORIG_CONFIG, 'CONFIG_RTE_LIBRTE_MLX5_PMD', 'n')
 
 
 def generate_dpdk_extra_mk():
@@ -290,22 +288,15 @@ def download_dpdk(quiet=False):
 
 
 def configure_dpdk():
-    try:
-        print('Configuring DPDK...')
-        # override RTE_MACHINE with the one in DPDK_BASE_CONFIG
-        cmd("sed -i '/CONFIG_RTE_MACHINE/s/^/#/g' %s/config/defconfig_x86_64-native-linuxapp-gcc" % DPDK_DIR)
-        cmd('cp -f %s %s' % (DPDK_BASE_CONFIG, DPDK_FINAL_CONFIG))
+    print('Configuring DPDK...')
 
-        check_kernel_headers()
+    check_kernel_headers()
 
-        check_mlx()
+    check_mlx()
 
-        generate_dpdk_extra_mk()
+    generate_dpdk_extra_mk()
 
-        cmd('cp -f %s %s' % (DPDK_FINAL_CONFIG, DPDK_ORIG_CONFIG))
-        cmd('make -C %s config T=%s' % (DPDK_DIR, DPDK_TARGET))
-    finally:
-        cmd('rm -f %s' % DPDK_FINAL_CONFIG)
+    cmd('make -C %s config T=%s' % (DPDK_DIR, DPDK_TARGET))
 
 
 def makeflags():
@@ -538,6 +529,8 @@ def main():
 
     if args.benchmark_path:
         update_benchmark_path(args.benchmark_path[0])
+    if not os.path.exists(DEPS_DIR):
+        os.makedirs(DEPS_DIR)
 
     # TODO(torek): only update if needed
     generate_extra_mk()
diff --git a/core/Makefile b/core/Makefile
index 5ab8a1503..a9c357441 100644
--- a/core/Makefile
+++ b/core/Makefile
@@ -61,13 +61,13 @@ endif
 
 HAS_PKG_CONFIG := $(shell command -v $(PKG_CONFIG) 2>&1 >/dev/null && echo yes || echo no)
 
-RTE_SDK ?= $(abspath ../deps/dpdk-17.11)
+RTE_SDK ?= $(abspath ../deps/dpdk-19.08)
 RTE_TARGET ?= $(shell uname -m)-native-linuxapp-gcc
 DPDK_LIB ?= dpdk
 
 ifneq ($(wildcard $(RTE_SDK)/$(RTE_TARGET)/*),)
   DPDK_INC_DIR := $(RTE_SDK)/$(RTE_TARGET)/include
-  DPDK_LIB_DIR := $(RTE_SDK)/$(RTE_TARGET)/lib
+  DPDK_LIB_DIR := $(RTE_SDK)/$(RTE_TARGET)/build/lib
 else ifneq ($(wildcard $(RTE_SDK)/build/*),)
   # if the user didn't do "make install" for DPDK
   DPDK_INC_DIR := $(RTE_SDK)/build/include
@@ -114,10 +114,14 @@ CXXFLAGS += -std=c++17 -g3 -ggdb3 $(CXXARCHFLAGS) \
             -isystem $(dir $<).. -isystem $(COREDIR)/modules \
             -D_GNU_SOURCE \
             -Werror -Wall -Wextra -Wcast-align -Wno-error=deprecated-declarations \
+            -Wno-error=array-bounds \
             $(PKG_CFLAGS)
 
-PERMISSIVE := -Wno-unused-parameter -Wno-missing-field-initializers \
-              -Wno-unused-private-field
+ifeq "$(shell test $(CXXVERSION) -ge 9; echo $$?)" "0"
+  CXXFLAGS += -Wno-error=address-of-packed-member
+endif
+
+PERMISSIVE := -Wno-unused-parameter -Wno-missing-field-initializers
 
 # -Wshadow should not be used for g++ 4.x, as it has too many false positives
 ifeq "$(shell expr $(CXXCOMPILER) = g++ \& $(CXXVERSION) \< 50000)" "0"
diff --git a/core/drivers/pmd.cc b/core/drivers/pmd.cc
index 3ed683156..88832ed0a 100644
--- a/core/drivers/pmd.cc
+++ b/core/drivers/pmd.cc
@@ -30,7 +30,8 @@
 
 #include "pmd.h"
 
-#include <rte_ethdev_pci.h>
+#include <rte_ethdev.h>
+#include <rte_bus_pci.h>
 
 #include "../utils/ether.h"
 #include "../utils/format.h"
@@ -42,51 +43,61 @@
 #define SN_HW_RXCSUM 0
 #define SN_HW_TXCSUM 0
 
-static const struct rte_eth_conf default_eth_conf() {
+static const struct rte_eth_conf default_eth_conf(struct rte_eth_dev_info dev_info, int num_rxq) {
   struct rte_eth_conf ret = rte_eth_conf();
+  uint64_t rss_hf = ETH_RSS_IP | ETH_RSS_UDP | ETH_RSS_TCP | ETH_RSS_SCTP;
+
+  if (num_rxq < 1) {
+    rss_hf = 0;
+  } else if (dev_info.flow_type_rss_offloads) {
+    rss_hf = dev_info.flow_type_rss_offloads;
+  }
 
   ret.link_speeds = ETH_LINK_SPEED_AUTONEG;
 
   ret.rxmode.mq_mode = ETH_MQ_RX_RSS;
-  ret.rxmode.ignore_offload_bitfield = 1;
-  ret.rxmode.offloads |= DEV_RX_OFFLOAD_CRC_STRIP;
   ret.rxmode.offloads |= (SN_HW_RXCSUM ? DEV_RX_OFFLOAD_CHECKSUM : 0x0);
 
   ret.rx_adv_conf.rss_conf = {
       .rss_key = nullptr,
       .rss_key_len = 40,
-      /* TODO: query rte_eth_dev_info_get() to set this*/
-      .rss_hf = ETH_RSS_IP | ETH_RSS_UDP | ETH_RSS_TCP | ETH_RSS_SCTP,
+      .rss_hf = rss_hf,
   };
 
   return ret;
 }
 
 void PMDPort::InitDriver() {
-  dpdk_port_t num_dpdk_ports = rte_eth_dev_count();
+  dpdk_port_t num_dpdk_ports = rte_eth_dev_count_avail();
 
   LOG(INFO) << static_cast<int>(num_dpdk_ports)
             << " DPDK PMD ports have been recognized:";
 
   for (dpdk_port_t i = 0; i < num_dpdk_ports; i++) {
     struct rte_eth_dev_info dev_info;
+    struct rte_pci_device *pci_dev;
+    struct rte_bus *bus = nullptr;
     std::string pci_info;
     int numa_node = -1;
     bess::utils::Ethernet::Address lladdr;
 
     rte_eth_dev_info_get(i, &dev_info);
 
-    if (dev_info.pci_dev) {
-      pci_info = bess::utils::Format(
+    numa_node = rte_eth_dev_socket_id(static_cast<int>(i));
+    rte_eth_macaddr_get(i, reinterpret_cast<rte_ether_addr *>(lladdr.bytes));
+
+    if (dev_info.device) {
+      bus = rte_bus_find_by_device(dev_info.device);
+      if (bus && !strcmp(bus->name, "pci")) {
+        pci_dev = RTE_DEV_TO_PCI(dev_info.device);
+        pci_info = bess::utils::Format(
           "%08x:%02hhx:%02hhx.%02hhx %04hx:%04hx  ",
-          dev_info.pci_dev->addr.domain, dev_info.pci_dev->addr.bus,
-          dev_info.pci_dev->addr.devid, dev_info.pci_dev->addr.function,
-          dev_info.pci_dev->id.vendor_id, dev_info.pci_dev->id.device_id);
+          pci_dev->addr.domain, pci_dev->addr.bus,
+          pci_dev->addr.devid, pci_dev->addr.function,
+          pci_dev->id.vendor_id, pci_dev->id.device_id);
+      }
     }
 
-    numa_node = rte_eth_dev_socket_id(static_cast<int>(i));
-    rte_eth_macaddr_get(i, reinterpret_cast<ether_addr *>(lladdr.bytes));
-
     LOG(INFO) << "DPDK port_id " << static_cast<int>(i) << " ("
               << dev_info.driver_name << ")   RXQ " << dev_info.max_rx_queues
               << " TXQ " << dev_info.max_tx_queues << "  " << lladdr.ToString()
@@ -121,6 +132,8 @@ static CommandResponse find_dpdk_port_by_pci_addr(const std::string &pci,
                                                   bool *ret_hot_plugged) {
   dpdk_port_t port_id = DPDK_PORT_UNKNOWN;
   struct rte_pci_addr addr;
+  struct rte_bus *bus = nullptr;
+  const struct rte_pci_device *pci_dev;
 
   if (pci.length() == 0) {
     return CommandFailure(EINVAL, "No PCI address specified");
@@ -133,15 +146,19 @@ static CommandResponse find_dpdk_port_by_pci_addr(const std::string &pci,
                           "dddd:bb:dd.ff or bb:dd.ff");
   }
 
-  dpdk_port_t num_dpdk_ports = rte_eth_dev_count();
+  dpdk_port_t num_dpdk_ports = rte_eth_dev_count_avail();
   for (dpdk_port_t i = 0; i < num_dpdk_ports; i++) {
     struct rte_eth_dev_info dev_info;
     rte_eth_dev_info_get(i, &dev_info);
 
-    if (dev_info.pci_dev) {
-      if (rte_eal_compare_pci_addr(&addr, &dev_info.pci_dev->addr) == 0) {
-        port_id = i;
-        break;
+    if (dev_info.device) {
+      bus = rte_bus_find_by_device(dev_info.device);
+      if (bus && !strcmp(bus->name, "pci")) {
+        pci_dev = RTE_DEV_TO_PCI(dev_info.device);
+        if (rte_eal_compare_pci_addr(&addr, &pci_dev->addr) == 0) {
+          port_id = i;
+          break;
+        }
       }
     }
   }
@@ -153,7 +170,10 @@ static CommandResponse find_dpdk_port_by_pci_addr(const std::string &pci,
     snprintf(name, RTE_ETH_NAME_MAX_LEN, "%08x:%02x:%02x.%02x", addr.domain,
              addr.bus, addr.devid, addr.function);
 
-    ret = rte_eth_dev_attach(name, &port_id);
+    struct rte_devargs da;
+    memset(&da, 0, sizeof(da));
+    da.bus = bus;
+    ret = rte_eal_hotplug_add(bus->name, name, da.args);
 
     if (ret < 0) {
       return CommandFailure(ENODEV, "Cannot attach PCI device %s", name);
@@ -181,7 +201,8 @@ static CommandResponse find_dpdk_vdev(const std::string &vdev,
   }
 
   const char *name = vdev.c_str();
-  int ret = rte_eth_dev_attach(name, &port_id);
+  char vdev_args[64];
+  int ret = rte_eal_hotplug_add("vdev", name, vdev_args);
 
   if (ret < 0) {
     return CommandFailure(ENODEV, "Cannot attach vdev %s", name);
@@ -235,15 +256,15 @@ CommandResponse PMDPort::Init(const bess::pb::PMDPortArg &arg) {
     return CommandFailure(ENOENT, "Port not found");
   }
 
-  eth_conf = default_eth_conf();
-  if (arg.loopback()) {
-    eth_conf.lpbk_mode = 1;
-  }
-
   /* Use defaut rx/tx configuration as provided by PMD drivers,
    * with minor tweaks */
   rte_eth_dev_info_get(ret_port_id, &dev_info);
 
+  eth_conf = default_eth_conf(dev_info, num_rxq);
+  if (arg.loopback()) {
+    eth_conf.lpbk_mode = 1;
+  }
+
   if (dev_info.driver_name) {
     driver_ = dev_info.driver_name;
   }
@@ -255,11 +276,6 @@ CommandResponse PMDPort::Init(const bess::pb::PMDPortArg &arg) {
     eth_rxconf.rx_drop_en = 1;
   }
 
-  eth_txconf = dev_info.default_txconf;
-  eth_txconf.txq_flags = ETH_TXQ_FLAGS_NOVLANOFFL |
-                         ETH_TXQ_FLAGS_NOMULTSEGS * (1 - SN_TSO_SG) |
-                         ETH_TXQ_FLAGS_NOXSUMS * (1 - SN_HW_TXCSUM);
-
   ret = rte_eth_dev_configure(ret_port_id, num_rxq, num_txq, &eth_conf);
   if (ret != 0) {
     return CommandFailure(-ret, "rte_eth_dev_configure() failed");
@@ -316,7 +332,7 @@ CommandResponse PMDPort::Init(const bess::pb::PMDPortArg &arg) {
       numa_node == -1 ? UNCONSTRAINED_SOCKET : (1ull << numa_node);
 
   rte_eth_macaddr_get(dpdk_port_id_,
-                      reinterpret_cast<ether_addr *>(conf_.mac_addr.bytes));
+                      reinterpret_cast<rte_ether_addr *>(conf_.mac_addr.bytes));
 
   // Reset hardware stat counters, as they may still contain previous data
   CollectStats(true);
@@ -338,8 +354,8 @@ int PMDPort::UpdateConf(const Conf &conf) {
   }
 
   if (conf_.mac_addr != conf.mac_addr && !conf.mac_addr.IsZero()) {
-    ether_addr tmp;
-    ether_addr_copy(reinterpret_cast<const ether_addr *>(&conf.mac_addr.bytes),
+    rte_ether_addr tmp;
+    rte_ether_addr_copy(reinterpret_cast<const rte_ether_addr *>(&conf.mac_addr.bytes),
                     &tmp);
     int ret = rte_eth_dev_default_mac_addr_set(dpdk_port_id_, &tmp);
     if (ret == 0) {
@@ -368,15 +384,31 @@ void PMDPort::DeInit() {
   rte_eth_dev_stop(dpdk_port_id_);
 
   if (hot_plugged_) {
+    struct rte_eth_dev_info dev_info;
+    struct rte_bus *bus = nullptr;
+    rte_eth_dev_info_get(dpdk_port_id_, &dev_info);
+
     char name[RTE_ETH_NAME_MAX_LEN];
     int ret;
+    
+    if (dev_info.device) {
+      bus = rte_bus_find_by_device(dev_info.device);
+      if (rte_eth_dev_get_name_by_port(dpdk_port_id_, name) == 0) {
+        rte_eth_dev_close(dpdk_port_id_);
+        ret = rte_eal_hotplug_remove(bus->name, name);
+        if (ret < 0) {
+          LOG(WARNING) << "rte_eal_hotplug_remove(" << static_cast<int>(dpdk_port_id_)
+                       << ") failed: " << rte_strerror(-ret);
+        }
+        return;
+      } else {
+        LOG(WARNING) << "rte_eth_dev_get_name failed for port" << static_cast<int>(dpdk_port_id_);
+      }
+    } else {
+        LOG(WARNING) << "rte_eth_def_info_get failed for port" << static_cast<int>(dpdk_port_id_);
+    }
 
     rte_eth_dev_close(dpdk_port_id_);
-    ret = rte_eth_dev_detach(dpdk_port_id_, name);
-    if (ret < 0) {
-      LOG(WARNING) << "rte_eth_dev_detach(" << static_cast<int>(dpdk_port_id_)
-                   << ") failed: " << rte_strerror(-ret);
-    }
   }
 }
 
diff --git a/core/packet_pool.cc b/core/packet_pool.cc
index 7318cee65..fd2fa78f0 100644
--- a/core/packet_pool.cc
+++ b/core/packet_pool.cc
@@ -168,10 +168,8 @@ PlainPacketPool::PlainPacketPool(size_t capacity, int socket_id)
   pool_->flags |= MEMPOOL_F_NO_PHYS_CONTIG;
 
   size_t page_shift = __builtin_ffs(getpagesize());
-  size_t element_size =
-      pool_->header_size + pool_->elt_size + pool_->trailer_size;
-  size_t size = rte_mempool_xmem_size(pool_->size, element_size, page_shift,
-                                      pool_->flags);
+  size_t *min_chunk_size = nullptr, *align = nullptr;
+  size_t size = rte_mempool_op_calc_mem_size_default(pool_, pool_->size, page_shift, min_chunk_size, align);
 
   void *addr = mmap(nullptr, size, PROT_READ | PROT_WRITE,
                     MAP_SHARED | MAP_ANONYMOUS, -1, 0);
@@ -198,13 +196,12 @@ BessPacketPool::BessPacketPool(size_t capacity, int socket_id)
     : PacketPool(capacity, socket_id),
       mem_(static_cast<size_t>(FLAGS_m) * 1024 * 1024, socket_id) {
   size_t page_shift = __builtin_ffs(getpagesize());
-  size_t element_size =
-      pool_->header_size + pool_->elt_size + pool_->trailer_size;
 
   while (pool_->populated_size < pool_->size) {
     size_t deficit = pool_->size - pool_->populated_size;
+    size_t *min_chunk_size = nullptr, *align = nullptr;
     size_t bytes =
-        rte_mempool_xmem_size(deficit, element_size, page_shift, pool_->flags);
+        rte_mempool_op_calc_mem_size_default(pool_, deficit, page_shift, min_chunk_size, align);
 
     auto [addr, alloced_bytes] = mem_.AllocUpto(bytes);
     if (addr == nullptr) {
diff --git a/core/utils/checksum_test.cc b/core/utils/checksum_test.cc
index 3351ce946..ee7ec8d72 100644
--- a/core/utils/checksum_test.cc
+++ b/core/utils/checksum_test.cc
@@ -97,7 +97,7 @@ TEST(ChecksumTest, Ipv4NoOptChecksum) {
   ip->src = be32_t(0x12345678);
   ip->dst = be32_t(0x12347890);
 
-  uint16_t cksum_dpdk = rte_ipv4_cksum(reinterpret_cast<const ipv4_hdr *>(ip));
+  uint16_t cksum_dpdk = rte_ipv4_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip));
   uint16_t cksum_bess = CalculateIpv4NoOptChecksum(*ip);
   EXPECT_EQ(cksum_dpdk, cksum_bess);
 
@@ -115,7 +115,7 @@ TEST(ChecksumTest, Ipv4NoOptChecksum) {
     ip->src = be32_t(rd.Get());
     ip->dst = be32_t(rd.Get());
 
-    cksum_dpdk = rte_ipv4_cksum(reinterpret_cast<const ipv4_hdr *>(ip));
+    cksum_dpdk = rte_ipv4_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip));
     cksum_bess = CalculateIpv4NoOptChecksum(*ip);
 
     if (cksum_dpdk == 0xffff) {
@@ -212,7 +212,7 @@ TEST(ChecksumTest, UdpChecksum) {
   udp->length = be16_t(8);
 
   uint16_t cksum_dpdk =
-      rte_ipv4_udptcp_cksum(reinterpret_cast<const ipv4_hdr *>(ip), udp);
+      rte_ipv4_udptcp_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip), udp);
   uint16_t cksum_bess = CalculateIpv4UdpChecksum(*ip, *udp);
   EXPECT_EQ(cksum_dpdk, cksum_bess);
 
@@ -243,7 +243,7 @@ TEST(ChecksumTest, UdpChecksum) {
     ip->checksum = 0x0000;   // for dpdk
     udp->checksum = 0x0000;  // for dpdk
 
-    cksum_dpdk = rte_ipv4_cksum(reinterpret_cast<const ipv4_hdr *>(ip));
+    cksum_dpdk = rte_ipv4_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip));
     cksum_bess = CalculateIpv4NoOptChecksum(*ip);
 
     if (cksum_dpdk == 0xffff) {
@@ -257,7 +257,7 @@ TEST(ChecksumTest, UdpChecksum) {
     ip->checksum = cksum_bess;
 
     cksum_dpdk =
-        rte_ipv4_udptcp_cksum(reinterpret_cast<const ipv4_hdr *>(ip), udp);
+        rte_ipv4_udptcp_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip), udp);
     cksum_bess = CalculateIpv4UdpChecksum(*ip, *udp);
 
     EXPECT_EQ(cksum_dpdk, cksum_bess);
@@ -290,7 +290,7 @@ TEST(ChecksumTest, TcpChecksum) {
   tcp->ack_num = be32_t(0x98461732);
 
   uint16_t cksum_dpdk =
-      rte_ipv4_udptcp_cksum(reinterpret_cast<const ipv4_hdr *>(ip), tcp);
+      rte_ipv4_udptcp_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip), tcp);
   uint16_t cksum_bess = CalculateIpv4TcpChecksum(*ip, *tcp);
   EXPECT_EQ(cksum_dpdk, cksum_bess);
 
@@ -320,7 +320,7 @@ TEST(ChecksumTest, TcpChecksum) {
     ip->checksum = 0x0000;   // for dpdk
     tcp->checksum = 0x0000;  // for dpdk
 
-    cksum_dpdk = rte_ipv4_cksum(reinterpret_cast<const ipv4_hdr *>(ip));
+    cksum_dpdk = rte_ipv4_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip));
     cksum_bess = CalculateIpv4NoOptChecksum(*ip);
 
     if (cksum_dpdk == 0xffff) {
@@ -334,7 +334,7 @@ TEST(ChecksumTest, TcpChecksum) {
     ip->checksum = cksum_bess;
 
     cksum_dpdk =
-        rte_ipv4_udptcp_cksum(reinterpret_cast<const ipv4_hdr *>(ip), tcp);
+        rte_ipv4_udptcp_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip), tcp);
     cksum_bess = CalculateIpv4TcpChecksum(*ip, *tcp);
 
     if (cksum_dpdk == 0xffff) {
diff --git a/deps/dpdk-17.11_common_linuxapp b/deps/dpdk-17.11_common_linuxapp
deleted file mode 100644
index 751bb3dee..000000000
--- a/deps/dpdk-17.11_common_linuxapp
+++ /dev/null
@@ -1,58 +0,0 @@
-#   BSD LICENSE
-#
-#   Copyright(c) 2010-2016 Intel Corporation. All rights reserved.
-#   All rights reserved.
-#
-#   Redistribution and use in source and binary forms, with or without
-#   modification, are permitted provided that the following conditions
-#   are met:
-#
-#     * Redistributions of source code must retain the above copyright
-#       notice, this list of conditions and the following disclaimer.
-#     * Redistributions in binary form must reproduce the above copyright
-#       notice, this list of conditions and the following disclaimer in
-#       the documentation and/or other materials provided with the
-#       distribution.
-#     * Neither the name of Intel Corporation nor the names of its
-#       contributors may be used to endorse or promote products derived
-#       from this software without specific prior written permission.
-#
-#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
-#   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
-#   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
-#   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
-#   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
-#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
-#   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
-#   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
-#   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-#   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
-#   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-#
-
-#include "common_base"
-
-CONFIG_RTE_EXEC_ENV="linuxapp"
-CONFIG_RTE_EXEC_ENV_LINUXAPP=y
-
-CONFIG_RTE_EAL_NUMA_AWARE_HUGEPAGES=y
-CONFIG_RTE_EAL_IGB_UIO=y
-CONFIG_RTE_EAL_VFIO=y
-CONFIG_RTE_KNI_KMOD=y
-CONFIG_RTE_LIBRTE_KNI=y
-CONFIG_RTE_LIBRTE_PMD_KNI=y
-CONFIG_RTE_LIBRTE_VHOST=y
-CONFIG_RTE_LIBRTE_VHOST_NUMA=y
-CONFIG_RTE_LIBRTE_PMD_VHOST=y
-CONFIG_RTE_LIBRTE_PMD_AF_PACKET=y
-CONFIG_RTE_LIBRTE_PMD_TAP=y
-CONFIG_RTE_LIBRTE_AVP_PMD=y
-CONFIG_RTE_LIBRTE_NFP_PMD=y
-CONFIG_RTE_LIBRTE_POWER=y
-CONFIG_RTE_VIRTIO_USER=y
-
-# all changes from the original are below...
-CONFIG_RTE_MACHINE="nhm"
-CONFIG_RTE_LIBRTE_MLX4_PMD=y
-CONFIG_RTE_LIBRTE_MLX5_PMD=y
-CONFIG_RTE_LIBRTE_BNX2X_PMD=y

From e10129f47503fd953e92cb38d32db2e00659a876 Mon Sep 17 00:00:00 2001
From: Tim Rozet <trozet@redhat.com>
Date: Wed, 30 Oct 2019 12:49:31 -0400
Subject: [PATCH 02/11] Remove dpdk 17.11 symlink in travis

Signed-off-by: Tim Rozet <trozet@redhat.com>
---
 .travis.yml | 3 ---
 1 file changed, 3 deletions(-)

diff --git a/.travis.yml b/.travis.yml
index bfb606e17..7b8cdc737 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -36,15 +36,12 @@ before_install:
   - sudo apt-get -q update
 
 install:
-  # note that if you are building a slightly different dpdk you will
-  # want to avoid the "ln -s /build/dpdk-17.11 deps" step below
   - sudo apt-get install -y python2.7 python3 python3-pip python3-setuptools ruby-dev
   - sudo gem install ffi fpm
   - pip2 install --user grpcio==1.10 scapy codecov
   - pip3 install --user grpcio==1.10 scapy coverage
   - "[[ ${COVERAGE:-0} == 0 ]] || sudo apt-get install -y gcc-7"  # install gcov-7
   - "[[ ${SANITIZE:-0} == 0 ]] || sudo apt-get install -y llvm-3.8"
-  - ln -s /build/dpdk-17.11 deps
   - "docker pull nefelinetworks/bess_build:latest${TAG_SUFFIX} | cat"  # cat suppresses progress bars
 
 before_script:

From 45b0b129d338c68bce430a2a6f9851c37bb38350 Mon Sep 17 00:00:00 2001
From: Tim Rozet <trozet@redhat.com>
Date: Wed, 30 Oct 2019 13:41:59 -0400
Subject: [PATCH 03/11] Fix ipv4_hdr references in checksum_bench

Signed-off-by: Tim Rozet <trozet@redhat.com>
---
 core/utils/checksum_bench.cc | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/core/utils/checksum_bench.cc b/core/utils/checksum_bench.cc
index c52d54c60..f27d56b02 100644
--- a/core/utils/checksum_bench.cc
+++ b/core/utils/checksum_bench.cc
@@ -126,7 +126,7 @@ BENCHMARK_DEFINE_F(ChecksumFixture, BmIpv4NoOptChecksumDpdk)
     ip->dst = be32_t(GetRandom());
 
     benchmark::DoNotOptimize(
-        rte_ipv4_cksum(reinterpret_cast<const ipv4_hdr *>(ip)));
+        rte_ipv4_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip)));
   }
 
   state.SetItemsProcessed(state.iterations());
@@ -207,7 +207,7 @@ BENCHMARK_DEFINE_F(ChecksumFixture, BmUdpChecksumDpdk)
     udp->checksum = 0x0000;  // for dpdk
 
     benchmark::DoNotOptimize(
-        rte_ipv4_udptcp_cksum(reinterpret_cast<const ipv4_hdr *>(ip), udp));
+        rte_ipv4_udptcp_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip), udp));
   }
 
   state.SetItemsProcessed(state.iterations());
@@ -267,7 +267,7 @@ BENCHMARK_DEFINE_F(ChecksumFixture, BmTcpChecksumDpdk)
     tcp->checksum = 0x0000;  // for dpdk
 
     benchmark::DoNotOptimize(
-        rte_ipv4_udptcp_cksum(reinterpret_cast<const ipv4_hdr *>(ip), tcp));
+        rte_ipv4_udptcp_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip), tcp));
   }
 
   state.SetItemsProcessed(state.iterations());
@@ -391,9 +391,9 @@ BENCHMARK_DEFINE_F(ChecksumFixture, BmSrcIpPortUpdateDpdk)
     // NAT simulation
     // - one update for ip checksum recalcuation
     // - two for tcp checksum
-    ip->checksum = rte_ipv4_cksum(reinterpret_cast<const ipv4_hdr *>(ip));
+    ip->checksum = rte_ipv4_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip));
     tcp->checksum =
-        rte_ipv4_udptcp_cksum(reinterpret_cast<const ipv4_hdr *>(ip), tcp);
+        rte_ipv4_udptcp_cksum(reinterpret_cast<const rte_ipv4_hdr *>(ip), tcp);
   }
 
   state.SetItemsProcessed(state.iterations());

From 7d4c296c101c47533348f9ebf0c4d678247baf07 Mon Sep 17 00:00:00 2001
From: Tim Rozet <trozet@redhat.com>
Date: Wed, 30 Oct 2019 20:53:45 -0400
Subject: [PATCH 04/11] Fixes segfault with rte_mempool calc

Signed-off-by: Tim Rozet <trozet@redhat.com>
---
 core/packet_pool.cc | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/core/packet_pool.cc b/core/packet_pool.cc
index fd2fa78f0..a3f8f90f3 100644
--- a/core/packet_pool.cc
+++ b/core/packet_pool.cc
@@ -165,11 +165,11 @@ void PacketPool::PostPopulate() {
 
 PlainPacketPool::PlainPacketPool(size_t capacity, int socket_id)
     : PacketPool(capacity, socket_id) {
-  pool_->flags |= MEMPOOL_F_NO_PHYS_CONTIG;
+  pool_->flags |= MEMPOOL_F_NO_IOVA_CONTIG;
 
   size_t page_shift = __builtin_ffs(getpagesize());
-  size_t *min_chunk_size = nullptr, *align = nullptr;
-  size_t size = rte_mempool_op_calc_mem_size_default(pool_, pool_->size, page_shift, min_chunk_size, align);
+  size_t min_chunk_size, align;
+  size_t size = rte_mempool_op_calc_mem_size_default(pool_, pool_->size, page_shift, &min_chunk_size, &align);
 
   void *addr = mmap(nullptr, size, PROT_READ | PROT_WRITE,
                     MAP_SHARED | MAP_ANONYMOUS, -1, 0);
@@ -199,9 +199,9 @@ BessPacketPool::BessPacketPool(size_t capacity, int socket_id)
 
   while (pool_->populated_size < pool_->size) {
     size_t deficit = pool_->size - pool_->populated_size;
-    size_t *min_chunk_size = nullptr, *align = nullptr;
+    size_t min_chunk_size, align;
     size_t bytes =
-        rte_mempool_op_calc_mem_size_default(pool_, deficit, page_shift, min_chunk_size, align);
+        rte_mempool_op_calc_mem_size_default(pool_, deficit, page_shift, &min_chunk_size, &align);
 
     auto [addr, alloced_bytes] = mem_.AllocUpto(bytes);
     if (addr == nullptr) {

From 20aa6973fdf57f1e835d22b9ac1c8edee5a64da5 Mon Sep 17 00:00:00 2001
From: Tim Rozet <trozet@redhat.com>
Date: Tue, 5 Nov 2019 16:50:43 -0500
Subject: [PATCH 05/11] Fixes updating port_id for vhostuser/pci devs

port_id was not being updated after plugging the devices.

Signed-off-by: Tim Rozet <trozet@redhat.com>
---
 core/drivers/pmd.cc | 19 +++++++++++++------
 1 file changed, 13 insertions(+), 6 deletions(-)

diff --git a/core/drivers/pmd.cc b/core/drivers/pmd.cc
index 88832ed0a..0c192243b 100644
--- a/core/drivers/pmd.cc
+++ b/core/drivers/pmd.cc
@@ -47,7 +47,7 @@ static const struct rte_eth_conf default_eth_conf(struct rte_eth_dev_info dev_in
   struct rte_eth_conf ret = rte_eth_conf();
   uint64_t rss_hf = ETH_RSS_IP | ETH_RSS_UDP | ETH_RSS_TCP | ETH_RSS_SCTP;
 
-  if (num_rxq < 1) {
+  if (num_rxq <= 1) {
     rss_hf = 0;
   } else if (dev_info.flow_type_rss_offloads) {
     rss_hf = dev_info.flow_type_rss_offloads;
@@ -178,7 +178,10 @@ static CommandResponse find_dpdk_port_by_pci_addr(const std::string &pci,
     if (ret < 0) {
       return CommandFailure(ENODEV, "Cannot attach PCI device %s", name);
     }
-
+    ret = rte_eth_dev_get_port_by_name(name, &port_id);
+    if (ret< 0) {
+      return CommandFailure(ENODEV, "Cannot find port id for PCI device %s", name);
+    }
     *ret_hot_plugged = true;
   }
 
@@ -200,14 +203,18 @@ static CommandResponse find_dpdk_vdev(const std::string &vdev,
     return CommandFailure(EINVAL, "No vdev specified");
   }
 
-  const char *name = vdev.c_str();
-  char vdev_args[64];
-  int ret = rte_eal_hotplug_add("vdev", name, vdev_args);
-
+  int ret = rte_dev_probe(vdev.c_str());
   if (ret < 0) {
     return CommandFailure(ENODEV, "Cannot attach vdev %s", name);
   }
 
+  struct rte_dev_iterator iterator;
+  RTE_ETH_FOREACH_MATCHING_DEV(port_id, vdev.c_str(), &iterator) {
+    LOG(INFO) << "port id: " << port_id << "matches vdev: " << vdev;
+    rte_eth_iterator_cleanup(&iterator);
+    break;
+  }
+
   *ret_hot_plugged = true;
   *ret_port_id = port_id;
   return CommandSuccess();

From 6842e8b9cf6aeec68a9ce3a0b5bb7042001d6c28 Mon Sep 17 00:00:00 2001
From: Tim Rozet <trozet@redhat.com>
Date: Wed, 6 Nov 2019 17:03:10 -0500
Subject: [PATCH 06/11] Fixes tx queue conf

The default tx queue conf had accidentally been removed, causing tx
queue setup to fail at times.

Signed-off-by: Tim Rozet <trozet@redhat.com>
---
 core/drivers/pmd.cc | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/core/drivers/pmd.cc b/core/drivers/pmd.cc
index 0c192243b..68bc51a01 100644
--- a/core/drivers/pmd.cc
+++ b/core/drivers/pmd.cc
@@ -289,6 +289,8 @@ CommandResponse PMDPort::Init(const bess::pb::PMDPortArg &arg) {
   }
   rte_eth_promiscuous_enable(ret_port_id);
 
+  eth_txconf = dev_info.default_txconf;
+
   // NOTE: As of DPDK 17.02, TX queues should be initialized first.
   // Otherwise the DPDK virtio PMD will crash in rte_eth_rx_burst() later.
   for (i = 0; i < num_txq; i++) {

From ec483f89b89f67922abdbdf8704485b5a34f4e3c Mon Sep 17 00:00:00 2001
From: Tim Rozet <trozet@redhat.com>
Date: Fri, 8 Nov 2019 11:23:09 -0500
Subject: [PATCH 07/11] Fixes container building

libpcap has a conflicting function bpf_validate. Patch to rename as
rte_bpf_validate in dpdk.

Signed-off-by: Tim Rozet <trozet@redhat.com>
---
 build.py                |  4 ++++
 core/drivers/pmd.cc     |  2 +-
 deps/bpf_validate.patch | 41 +++++++++++++++++++++++++++++++++++++++++
 3 files changed, 46 insertions(+), 1 deletion(-)
 create mode 100644 deps/bpf_validate.patch

diff --git a/build.py b/build.py
index 96459d82f..3fdbf1c51 100755
--- a/build.py
+++ b/build.py
@@ -331,6 +331,10 @@ def build_dpdk():
     if not os.path.exists('%s/build' % DPDK_DIR):
         configure_dpdk()
 
+    # patch bpf_validate as it conflicts with libpcap
+    cmd('patch -d %s -p1 < %s/bpf_validate.patch' % (DPDK_DIR, DEPS_DIR),
+        shell=True)
+
     print('Building DPDK...')
     nproc = int(cmd('nproc', quiet=True))
     cmd('make %s -C %s EXTRA_CFLAGS=%s' % (makeflags(),
diff --git a/core/drivers/pmd.cc b/core/drivers/pmd.cc
index 68bc51a01..cda6c5fca 100644
--- a/core/drivers/pmd.cc
+++ b/core/drivers/pmd.cc
@@ -205,7 +205,7 @@ static CommandResponse find_dpdk_vdev(const std::string &vdev,
 
   int ret = rte_dev_probe(vdev.c_str());
   if (ret < 0) {
-    return CommandFailure(ENODEV, "Cannot attach vdev %s", name);
+    return CommandFailure(ENODEV, "Cannot attach vdev %s", vdev.c_str());
   }
 
   struct rte_dev_iterator iterator;
diff --git a/deps/bpf_validate.patch b/deps/bpf_validate.patch
new file mode 100644
index 000000000..3e6f20b42
--- /dev/null
+++ b/deps/bpf_validate.patch
@@ -0,0 +1,41 @@
+diff --git a/lib/librte_bpf/bpf_impl.h b/lib/librte_bpf/bpf_impl.h
+index b577e2c..f1d6f9a 100644
+--- a/lib/librte_bpf/bpf_impl.h
++++ b/lib/librte_bpf/bpf_impl.h
+@@ -21,7 +21,7 @@ struct rte_bpf {
+ 	uint32_t stack_sz;
+ };
+ 
+-extern int bpf_validate(struct rte_bpf *bpf);
++extern int rte_bpf_validate(struct rte_bpf *bpf);
+ 
+ extern int bpf_jit(struct rte_bpf *bpf);
+ 
+diff --git a/lib/librte_bpf/bpf_load.c b/lib/librte_bpf/bpf_load.c
+index d9d163b..bd9eebf 100644
+--- a/lib/librte_bpf/bpf_load.c
++++ b/lib/librte_bpf/bpf_load.c
+@@ -115,7 +115,7 @@
+ 		return NULL;
+ 	}
+ 
+-	rc = bpf_validate(bpf);
++	rc = rte_bpf_validate(bpf);
+ 	if (rc == 0) {
+ 		bpf_jit(bpf);
+ 		if (mprotect(bpf, bpf->sz, PROT_READ) != 0)
+diff --git a/lib/librte_bpf/bpf_validate.c b/lib/librte_bpf/bpf_validate.c
+index 83983ef..12c34f0 100644
+--- a/lib/librte_bpf/bpf_validate.c
++++ b/lib/librte_bpf/bpf_validate.c
+@@ -2209,7 +2209,7 @@ struct bpf_ins_check {
+ }
+ 
+ int
+-bpf_validate(struct rte_bpf *bpf)
++rte_bpf_validate(struct rte_bpf *bpf)
+ {
+ 	int32_t rc;
+ 	struct bpf_verifier bvf;
+-- 
+

From 006aceeb81c97ad00f6e75cfebf60881f41ac531 Mon Sep 17 00:00:00 2001
From: Tim Rozet <trozet@redhat.com>
Date: Fri, 8 Nov 2019 15:56:50 -0500
Subject: [PATCH 08/11] Update travis VM to bionic

Failures in CI are occurring due to glibc being a lower version on the
travis VM than what is built inside of the contianer. Bumping to bionic,
which uses a newer version.

Signed-off-by: Tim Rozet <trozet@redhat.com>
---
 .travis.yml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/.travis.yml b/.travis.yml
index 7b8cdc737..37666a253 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,5 +1,5 @@
 sudo: required
-dist: xenial
+dist: bionic
 language: cpp
 
 cache:

From 5a1d3bd2d401d87272ec4d62535ab7ef5873a1eb Mon Sep 17 00:00:00 2001
From: Tim Rozet <trozet@redhat.com>
Date: Fri, 8 Nov 2019 16:42:32 -0500
Subject: [PATCH 09/11] More travis fixes

 - Bump bess build timeout to 30 min. Takes extra time to build with
   pulling dpdk source.
 - Bump llvm version to 3.9. 3.8 does not exist in bionic.

Signed-off-by: Tim Rozet <trozet@redhat.com>
---
 .travis.yml | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/.travis.yml b/.travis.yml
index 37666a253..09fe4c055 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -16,7 +16,7 @@ branches:
 
 env:
   global:
-    - ASAN_SYMBOLIZER_PATH=/usr/lib/llvm-3.8/bin/llvm-symbolizer
+    - ASAN_SYMBOLIZER_PATH=/usr/lib/llvm-3.9/bin/llvm-symbolizer
     - ASAN_OPTIONS=log_path=/tmp/sanitizer,log_exe_name=1
     - LSAN_OPTIONS=suppressions=$TRAVIS_BUILD_DIR/core/lsan.suppress
     - UBSAN_OPTIONS=suppressions=$TRAVIS_BUILD_DIR/core/ubsan.suppress,print_stacktrace=1
@@ -41,7 +41,7 @@ install:
   - pip2 install --user grpcio==1.10 scapy codecov
   - pip3 install --user grpcio==1.10 scapy coverage
   - "[[ ${COVERAGE:-0} == 0 ]] || sudo apt-get install -y gcc-7"  # install gcov-7
-  - "[[ ${SANITIZE:-0} == 0 ]] || sudo apt-get install -y llvm-3.8"
+  - "[[ ${SANITIZE:-0} == 0 ]] || sudo apt-get install -y llvm-3.9"
   - "docker pull nefelinetworks/bess_build:latest${TAG_SUFFIX} | cat"  # cat suppresses progress bars
 
 before_script:
@@ -51,8 +51,8 @@ before_script:
   - ccache -s
 
 script:
-  # travis_wait extends the 10-min timeout to 20mins.
-  - travis_wait ./container_build.py bess
+  # travis_wait extends the 10-min timeout to 30mins.
+  - travis_wait 30 ./container_build.py bess
   - ./container_build.py kmod_buildtest
   - (cd core && ./all_test --gtest_shuffle)  # TcpFlowReconstructTest requires working directory to be `core/`
   - coverage2 run -m unittest discover -v

From fc4b5a38a161527b2de2fc265bc577b127cb5457 Mon Sep 17 00:00:00 2001
From: Anton Ivanov <anton.ivanov@cambridgegreys.com>
Date: Wed, 13 Nov 2019 11:30:38 +0000
Subject: [PATCH 10/11] Allow repeated builds

The patching for dpdk will fail on a repeated build which has
not been cleaned. This fixes it.

Signed-off-by: Anton Ivanov <anton.ivanov@cambridgegreys.com>
---
 build.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/build.py b/build.py
index 3fdbf1c51..3374098ac 100755
--- a/build.py
+++ b/build.py
@@ -332,7 +332,7 @@ def build_dpdk():
         configure_dpdk()
 
     # patch bpf_validate as it conflicts with libpcap
-    cmd('patch -d %s -p1 < %s/bpf_validate.patch' % (DPDK_DIR, DEPS_DIR),
+    cmd('patch -d %s -N -p1 < %s/bpf_validate.patch || true' % (DPDK_DIR, DEPS_DIR),
         shell=True)
 
     print('Building DPDK...')

From 066903f2e39e738b5f128f0ce8cd18ca9b897452 Mon Sep 17 00:00:00 2001
From: Tim Rozet <trozet@redhat.com>
Date: Tue, 3 Dec 2019 15:27:16 -0500
Subject: [PATCH 11/11] Updates to DPDK 19.11

Signed-off-by: Tim Rozet <trozet@redhat.com>
---
 build.py            | 2 +-
 core/Makefile       | 2 +-
 core/drivers/pmd.cc | 5 ++---
 core/packet_pool.cc | 3 ++-
 4 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/build.py b/build.py
index 3374098ac..fd9dd76fd 100755
--- a/build.py
+++ b/build.py
@@ -89,7 +89,7 @@ def cmd(cmd, quiet=False, shell=False):
 DEPS_DIR = '%s/deps' % BESS_DIR
 
 DPDK_URL = 'https://fast.dpdk.org/rel'
-DPDK_VER = 'dpdk-19.08'
+DPDK_VER = 'dpdk-19.11'
 DPDK_TARGET = 'x86_64-native-linuxapp-gcc'
 
 kernel_release = cmd('uname -r', quiet=True).strip()
diff --git a/core/Makefile b/core/Makefile
index a9c357441..d4808f91f 100644
--- a/core/Makefile
+++ b/core/Makefile
@@ -61,7 +61,7 @@ endif
 
 HAS_PKG_CONFIG := $(shell command -v $(PKG_CONFIG) 2>&1 >/dev/null && echo yes || echo no)
 
-RTE_SDK ?= $(abspath ../deps/dpdk-19.08)
+RTE_SDK ?= $(abspath ../deps/dpdk-19.11)
 RTE_TARGET ?= $(shell uname -m)-native-linuxapp-gcc
 DPDK_LIB ?= dpdk
 
diff --git a/core/drivers/pmd.cc b/core/drivers/pmd.cc
index cda6c5fca..b72c4df4e 100644
--- a/core/drivers/pmd.cc
+++ b/core/drivers/pmd.cc
@@ -139,8 +139,7 @@ static CommandResponse find_dpdk_port_by_pci_addr(const std::string &pci,
     return CommandFailure(EINVAL, "No PCI address specified");
   }
 
-  if (eal_parse_pci_DomBDF(pci.c_str(), &addr) != 0 &&
-      eal_parse_pci_BDF(pci.c_str(), &addr) != 0) {
+  if (rte_pci_addr_parse(pci.c_str(), &addr) != 0) {
     return CommandFailure(EINVAL,
                           "PCI address must be like "
                           "dddd:bb:dd.ff or bb:dd.ff");
@@ -155,7 +154,7 @@ static CommandResponse find_dpdk_port_by_pci_addr(const std::string &pci,
       bus = rte_bus_find_by_device(dev_info.device);
       if (bus && !strcmp(bus->name, "pci")) {
         pci_dev = RTE_DEV_TO_PCI(dev_info.device);
-        if (rte_eal_compare_pci_addr(&addr, &pci_dev->addr) == 0) {
+        if (rte_pci_addr_cmp(&addr, &pci_dev->addr) == 0) {
           port_id = i;
           break;
         }
diff --git a/core/packet_pool.cc b/core/packet_pool.cc
index a3f8f90f3..a1d529f02 100644
--- a/core/packet_pool.cc
+++ b/core/packet_pool.cc
@@ -147,7 +147,8 @@ bool PacketPool::AllocBulk(Packet **pkts, size_t count, size_t len) {
 void PacketPool::PostPopulate() {
   PoolPrivate priv = {
       .dpdk_priv = {.mbuf_data_room_size = SNBUF_HEADROOM + SNBUF_DATA,
-                    .mbuf_priv_size = SNBUF_RESERVE},
+                    .mbuf_priv_size = SNBUF_RESERVE,
+                    .flags = 0},
       .owner = this};
 
   rte_pktmbuf_pool_init(pool_, &priv.dpdk_priv);
